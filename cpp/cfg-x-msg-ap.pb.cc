// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cfg-x-msg-ap.proto

#include "cfg-x-msg-ap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class XmsgApCfgPbDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgApCfgPb>
      _instance;
} _XmsgApCfgPb_default_instance_;
class XmsgApCfgXscTcpServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgApCfgXscTcpServer>
      _instance;
} _XmsgApCfgXscTcpServer_default_instance_;
class XmsgApCfgXscHttpServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgApCfgXscHttpServer>
      _instance;
} _XmsgApCfgXscHttpServer_default_instance_;
class XmsgApCfgXscWebSocketServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgApCfgXscWebSocketServer>
      _instance;
} _XmsgApCfgXscWebSocketServer_default_instance_;
class XmsgApCfgXscUdpServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgApCfgXscUdpServer>
      _instance;
} _XmsgApCfgXscUdpServer_default_instance_;
class XmsgApCfgXscRudpServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgApCfgXscRudpServer>
      _instance;
} _XmsgApCfgXscRudpServer_default_instance_;
class XmsgApCfgLogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgApCfgLog>
      _instance;
} _XmsgApCfgLog_default_instance_;
class XmsgImApCfgXmsgNeN2hAddrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImApCfgXmsgNeN2hAddr>
      _instance;
} _XmsgImApCfgXmsgNeN2hAddr_default_instance_;
namespace protobuf_cfg_2dx_2dmsg_2dap_2eproto {
void InitDefaultsXmsgApCfgPbImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgLog();
  protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgXscTcpServer();
  protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgXscHttpServer();
  protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgXscWebSocketServer();
  protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgXscUdpServer();
  protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgXscRudpServer();
  protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgImApCfgXmsgNeN2hAddr();
  {
    void* ptr = &::_XmsgApCfgPb_default_instance_;
    new (ptr) ::XmsgApCfgPb();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgApCfgPb::InitAsDefaultInstance();
}

void InitDefaultsXmsgApCfgPb() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgApCfgPbImpl);
}

void InitDefaultsXmsgApCfgXscTcpServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgApCfgXscTcpServer_default_instance_;
    new (ptr) ::XmsgApCfgXscTcpServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgApCfgXscTcpServer::InitAsDefaultInstance();
}

void InitDefaultsXmsgApCfgXscTcpServer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgApCfgXscTcpServerImpl);
}

void InitDefaultsXmsgApCfgXscHttpServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgXscTcpServer();
  {
    void* ptr = &::_XmsgApCfgXscHttpServer_default_instance_;
    new (ptr) ::XmsgApCfgXscHttpServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgApCfgXscHttpServer::InitAsDefaultInstance();
}

void InitDefaultsXmsgApCfgXscHttpServer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgApCfgXscHttpServerImpl);
}

void InitDefaultsXmsgApCfgXscWebSocketServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgXscTcpServer();
  {
    void* ptr = &::_XmsgApCfgXscWebSocketServer_default_instance_;
    new (ptr) ::XmsgApCfgXscWebSocketServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgApCfgXscWebSocketServer::InitAsDefaultInstance();
}

void InitDefaultsXmsgApCfgXscWebSocketServer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgApCfgXscWebSocketServerImpl);
}

void InitDefaultsXmsgApCfgXscUdpServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgApCfgXscUdpServer_default_instance_;
    new (ptr) ::XmsgApCfgXscUdpServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgApCfgXscUdpServer::InitAsDefaultInstance();
}

void InitDefaultsXmsgApCfgXscUdpServer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgApCfgXscUdpServerImpl);
}

void InitDefaultsXmsgApCfgXscRudpServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgApCfgXscRudpServer_default_instance_;
    new (ptr) ::XmsgApCfgXscRudpServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgApCfgXscRudpServer::InitAsDefaultInstance();
}

void InitDefaultsXmsgApCfgXscRudpServer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgApCfgXscRudpServerImpl);
}

void InitDefaultsXmsgApCfgLogImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgApCfgLog_default_instance_;
    new (ptr) ::XmsgApCfgLog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgApCfgLog::InitAsDefaultInstance();
}

void InitDefaultsXmsgApCfgLog() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgApCfgLogImpl);
}

void InitDefaultsXmsgImApCfgXmsgNeN2hAddrImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImApCfgXmsgNeN2hAddr_default_instance_;
    new (ptr) ::XmsgImApCfgXmsgNeN2hAddr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImApCfgXmsgNeN2hAddr::InitAsDefaultInstance();
}

void InitDefaultsXmsgImApCfgXmsgNeN2hAddr() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImApCfgXmsgNeN2hAddrImpl);
}

::google::protobuf::Metadata file_level_metadata[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgPb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgPb, cgt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgPb, log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgPb, pubtcp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgPb, pubhttp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgPb, pubwebsocket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgPb, pubudp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgPb, pubrudp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgPb, pritcp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgPb, n2h_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgXscTcpServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgXscTcpServer, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgXscTcpServer, worker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgXscTcpServer, peerlimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgXscTcpServer, peermtu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgXscTcpServer, peerrcvbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgXscTcpServer, peersndbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgXscTcpServer, lazyclose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgXscTcpServer, tracing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgXscTcpServer, heartbeat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgXscTcpServer, n2hzombie_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgXscTcpServer, n2htranstimeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgXscTcpServer, n2htracing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgXscTcpServer, h2nreconn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgXscTcpServer, h2ntranstimeout_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgXscHttpServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgXscHttpServer, tcp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgXscHttpServer, headerlimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgXscHttpServer, bodylimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgXscHttpServer, closewait_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgXscHttpServer, requiredheader_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgXscWebSocketServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgXscWebSocketServer, tcp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgXscUdpServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgXscUdpServer, addr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgXscRudpServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgXscRudpServer, addr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgLog, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgApCfgLog, output_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImApCfgXmsgNeN2hAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImApCfgXmsgNeN2hAddr, neg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImApCfgXmsgNeN2hAddr, cgt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImApCfgXmsgNeN2hAddr, prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImApCfgXmsgNeN2hAddr, pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImApCfgXmsgNeN2hAddr, addr_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::XmsgApCfgPb)},
  { 14, -1, sizeof(::XmsgApCfgXscTcpServer)},
  { 33, -1, sizeof(::XmsgApCfgXscHttpServer)},
  { 43, -1, sizeof(::XmsgApCfgXscWebSocketServer)},
  { 49, -1, sizeof(::XmsgApCfgXscUdpServer)},
  { 55, -1, sizeof(::XmsgApCfgXscRudpServer)},
  { 61, -1, sizeof(::XmsgApCfgLog)},
  { 68, -1, sizeof(::XmsgImApCfgXmsgNeN2hAddr)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgApCfgPb_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgApCfgXscTcpServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgApCfgXscHttpServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgApCfgXscWebSocketServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgApCfgXscUdpServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgApCfgXscRudpServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgApCfgLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImApCfgXmsgNeN2hAddr_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cfg-x-msg-ap.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022cfg-x-msg-ap.proto\"\336\002\n\013XmsgApCfgPb\022\013\n\003"
      "cgt\030\001 \001(\t\022\032\n\003log\030\002 \001(\0132\r.XmsgApCfgLog\022&\n"
      "\006pubTcp\030\003 \001(\0132\026.XmsgApCfgXscTcpServer\022(\n"
      "\007pubHttp\030\004 \001(\0132\027.XmsgApCfgXscHttpServer\022"
      "2\n\014pubWebSocket\030\005 \001(\0132\034.XmsgApCfgXscWebS"
      "ocketServer\022&\n\006pubUdp\030\006 \001(\0132\026.XmsgApCfgX"
      "scUdpServer\022(\n\007pubRudp\030\007 \001(\0132\027.XmsgApCfg"
      "XscRudpServer\022&\n\006priTcp\030\010 \001(\0132\026.XmsgApCf"
      "gXscTcpServer\022&\n\003n2h\030\t \003(\0132\031.XmsgImApCfg"
      "XmsgNeN2hAddr\"\244\002\n\025XmsgApCfgXscTcpServer\022"
      "\014\n\004addr\030\001 \001(\t\022\016\n\006worker\030\002 \001(\r\022\021\n\tpeerLim"
      "it\030\003 \001(\r\022\017\n\007peerMtu\030\004 \001(\r\022\022\n\npeerRcvBuf\030"
      "\005 \001(\r\022\022\n\npeerSndBuf\030\006 \001(\r\022\021\n\tlazyClose\030\007"
      " \001(\r\022\017\n\007tracing\030\010 \001(\010\022\021\n\theartbeat\030\t \001(\r"
      "\022\021\n\tn2hZombie\030\n \001(\r\022\027\n\017n2hTransTimeout\030\013"
      " \001(\r\022\022\n\nn2hTracing\030\014 \001(\010\022\021\n\th2nReConn\030\r "
      "\001(\r\022\027\n\017h2nTransTimeout\030\016 \001(\r\"\220\001\n\026XmsgApC"
      "fgXscHttpServer\022#\n\003tcp\030\001 \001(\0132\026.XmsgApCfg"
      "XscTcpServer\022\023\n\013headerLimit\030\002 \001(\r\022\021\n\tbod"
      "yLimit\030\003 \001(\r\022\021\n\tcloseWait\030\004 \001(\r\022\026\n\016requi"
      "redHeader\030\005 \003(\t\"B\n\033XmsgApCfgXscWebSocket"
      "Server\022#\n\003tcp\030\001 \001(\0132\026.XmsgApCfgXscTcpSer"
      "ver\"%\n\025XmsgApCfgXscUdpServer\022\014\n\004addr\030\001 \001"
      "(\t\"&\n\026XmsgApCfgXscRudpServer\022\014\n\004addr\030\001 \001"
      "(\t\"-\n\014XmsgApCfgLog\022\r\n\005level\030\001 \001(\t\022\016\n\006out"
      "put\030\002 \001(\t\"_\n\030XmsgImApCfgXmsgNeN2hAddr\022\013\n"
      "\003neg\030\001 \001(\t\022\013\n\003cgt\030\002 \001(\t\022\016\n\006prefix\030\003 \001(\t\022"
      "\013\n\003pwd\030\004 \001(\t\022\014\n\004addr\030\005 \001(\tB\027\n\010x.msg.pbB\013"
      "XmsgApCfgPbb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1139);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cfg-x-msg-ap.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cfg_2dx_2dmsg_2dap_2eproto

// ===================================================================

void XmsgApCfgPb::InitAsDefaultInstance() {
  ::_XmsgApCfgPb_default_instance_._instance.get_mutable()->log_ = const_cast< ::XmsgApCfgLog*>(
      ::XmsgApCfgLog::internal_default_instance());
  ::_XmsgApCfgPb_default_instance_._instance.get_mutable()->pubtcp_ = const_cast< ::XmsgApCfgXscTcpServer*>(
      ::XmsgApCfgXscTcpServer::internal_default_instance());
  ::_XmsgApCfgPb_default_instance_._instance.get_mutable()->pubhttp_ = const_cast< ::XmsgApCfgXscHttpServer*>(
      ::XmsgApCfgXscHttpServer::internal_default_instance());
  ::_XmsgApCfgPb_default_instance_._instance.get_mutable()->pubwebsocket_ = const_cast< ::XmsgApCfgXscWebSocketServer*>(
      ::XmsgApCfgXscWebSocketServer::internal_default_instance());
  ::_XmsgApCfgPb_default_instance_._instance.get_mutable()->pubudp_ = const_cast< ::XmsgApCfgXscUdpServer*>(
      ::XmsgApCfgXscUdpServer::internal_default_instance());
  ::_XmsgApCfgPb_default_instance_._instance.get_mutable()->pubrudp_ = const_cast< ::XmsgApCfgXscRudpServer*>(
      ::XmsgApCfgXscRudpServer::internal_default_instance());
  ::_XmsgApCfgPb_default_instance_._instance.get_mutable()->pritcp_ = const_cast< ::XmsgApCfgXscTcpServer*>(
      ::XmsgApCfgXscTcpServer::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgApCfgPb::kCgtFieldNumber;
const int XmsgApCfgPb::kLogFieldNumber;
const int XmsgApCfgPb::kPubTcpFieldNumber;
const int XmsgApCfgPb::kPubHttpFieldNumber;
const int XmsgApCfgPb::kPubWebSocketFieldNumber;
const int XmsgApCfgPb::kPubUdpFieldNumber;
const int XmsgApCfgPb::kPubRudpFieldNumber;
const int XmsgApCfgPb::kPriTcpFieldNumber;
const int XmsgApCfgPb::kN2HFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgApCfgPb::XmsgApCfgPb()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgPb();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgApCfgPb)
}
XmsgApCfgPb::XmsgApCfgPb(const XmsgApCfgPb& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      n2h_(from.n2h_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cgt().size() > 0) {
    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  if (from.has_log()) {
    log_ = new ::XmsgApCfgLog(*from.log_);
  } else {
    log_ = NULL;
  }
  if (from.has_pubtcp()) {
    pubtcp_ = new ::XmsgApCfgXscTcpServer(*from.pubtcp_);
  } else {
    pubtcp_ = NULL;
  }
  if (from.has_pubhttp()) {
    pubhttp_ = new ::XmsgApCfgXscHttpServer(*from.pubhttp_);
  } else {
    pubhttp_ = NULL;
  }
  if (from.has_pubwebsocket()) {
    pubwebsocket_ = new ::XmsgApCfgXscWebSocketServer(*from.pubwebsocket_);
  } else {
    pubwebsocket_ = NULL;
  }
  if (from.has_pubudp()) {
    pubudp_ = new ::XmsgApCfgXscUdpServer(*from.pubudp_);
  } else {
    pubudp_ = NULL;
  }
  if (from.has_pubrudp()) {
    pubrudp_ = new ::XmsgApCfgXscRudpServer(*from.pubrudp_);
  } else {
    pubrudp_ = NULL;
  }
  if (from.has_pritcp()) {
    pritcp_ = new ::XmsgApCfgXscTcpServer(*from.pritcp_);
  } else {
    pritcp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:XmsgApCfgPb)
}

void XmsgApCfgPb::SharedCtor() {
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&log_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pritcp_) -
      reinterpret_cast<char*>(&log_)) + sizeof(pritcp_));
  _cached_size_ = 0;
}

XmsgApCfgPb::~XmsgApCfgPb() {
  // @@protoc_insertion_point(destructor:XmsgApCfgPb)
  SharedDtor();
}

void XmsgApCfgPb::SharedDtor() {
  cgt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete log_;
  if (this != internal_default_instance()) delete pubtcp_;
  if (this != internal_default_instance()) delete pubhttp_;
  if (this != internal_default_instance()) delete pubwebsocket_;
  if (this != internal_default_instance()) delete pubudp_;
  if (this != internal_default_instance()) delete pubrudp_;
  if (this != internal_default_instance()) delete pritcp_;
}

void XmsgApCfgPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgApCfgPb::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgApCfgPb& XmsgApCfgPb::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgPb();
  return *internal_default_instance();
}

XmsgApCfgPb* XmsgApCfgPb::New(::google::protobuf::Arena* arena) const {
  XmsgApCfgPb* n = new XmsgApCfgPb;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgApCfgPb::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgApCfgPb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n2h_.Clear();
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && log_ != NULL) {
    delete log_;
  }
  log_ = NULL;
  if (GetArenaNoVirtual() == NULL && pubtcp_ != NULL) {
    delete pubtcp_;
  }
  pubtcp_ = NULL;
  if (GetArenaNoVirtual() == NULL && pubhttp_ != NULL) {
    delete pubhttp_;
  }
  pubhttp_ = NULL;
  if (GetArenaNoVirtual() == NULL && pubwebsocket_ != NULL) {
    delete pubwebsocket_;
  }
  pubwebsocket_ = NULL;
  if (GetArenaNoVirtual() == NULL && pubudp_ != NULL) {
    delete pubudp_;
  }
  pubudp_ = NULL;
  if (GetArenaNoVirtual() == NULL && pubrudp_ != NULL) {
    delete pubrudp_;
  }
  pubrudp_ = NULL;
  if (GetArenaNoVirtual() == NULL && pritcp_ != NULL) {
    delete pritcp_;
  }
  pritcp_ = NULL;
  _internal_metadata_.Clear();
}

bool XmsgApCfgPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgApCfgPb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cgt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cgt().data(), static_cast<int>(this->cgt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgApCfgPb.cgt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgApCfgLog log = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgApCfgXscTcpServer pubTcp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pubtcp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgApCfgXscHttpServer pubHttp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pubhttp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgApCfgXscWebSocketServer pubWebSocket = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pubwebsocket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgApCfgXscUdpServer pubUdp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pubudp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgApCfgXscRudpServer pubRudp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pubrudp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgApCfgXscTcpServer priTcp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pritcp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .XmsgImApCfgXmsgNeN2hAddr n2h = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_n2h()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgApCfgPb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgApCfgPb)
  return false;
#undef DO_
}

void XmsgApCfgPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgApCfgPb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cgt = 1;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgApCfgPb.cgt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cgt(), output);
  }

  // .XmsgApCfgLog log = 2;
  if (this->has_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->log_, output);
  }

  // .XmsgApCfgXscTcpServer pubTcp = 3;
  if (this->has_pubtcp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pubtcp_, output);
  }

  // .XmsgApCfgXscHttpServer pubHttp = 4;
  if (this->has_pubhttp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->pubhttp_, output);
  }

  // .XmsgApCfgXscWebSocketServer pubWebSocket = 5;
  if (this->has_pubwebsocket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->pubwebsocket_, output);
  }

  // .XmsgApCfgXscUdpServer pubUdp = 6;
  if (this->has_pubudp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->pubudp_, output);
  }

  // .XmsgApCfgXscRudpServer pubRudp = 7;
  if (this->has_pubrudp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->pubrudp_, output);
  }

  // .XmsgApCfgXscTcpServer priTcp = 8;
  if (this->has_pritcp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->pritcp_, output);
  }

  // repeated .XmsgImApCfgXmsgNeN2hAddr n2h = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->n2h_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->n2h(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgApCfgPb)
}

::google::protobuf::uint8* XmsgApCfgPb::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgApCfgPb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cgt = 1;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgApCfgPb.cgt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cgt(), target);
  }

  // .XmsgApCfgLog log = 2;
  if (this->has_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->log_, deterministic, target);
  }

  // .XmsgApCfgXscTcpServer pubTcp = 3;
  if (this->has_pubtcp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->pubtcp_, deterministic, target);
  }

  // .XmsgApCfgXscHttpServer pubHttp = 4;
  if (this->has_pubhttp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->pubhttp_, deterministic, target);
  }

  // .XmsgApCfgXscWebSocketServer pubWebSocket = 5;
  if (this->has_pubwebsocket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->pubwebsocket_, deterministic, target);
  }

  // .XmsgApCfgXscUdpServer pubUdp = 6;
  if (this->has_pubudp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->pubudp_, deterministic, target);
  }

  // .XmsgApCfgXscRudpServer pubRudp = 7;
  if (this->has_pubrudp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->pubrudp_, deterministic, target);
  }

  // .XmsgApCfgXscTcpServer priTcp = 8;
  if (this->has_pritcp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->pritcp_, deterministic, target);
  }

  // repeated .XmsgImApCfgXmsgNeN2hAddr n2h = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->n2h_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->n2h(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgApCfgPb)
  return target;
}

size_t XmsgApCfgPb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgApCfgPb)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .XmsgImApCfgXmsgNeN2hAddr n2h = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->n2h_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->n2h(static_cast<int>(i)));
    }
  }

  // string cgt = 1;
  if (this->cgt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cgt());
  }

  // .XmsgApCfgLog log = 2;
  if (this->has_log()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->log_);
  }

  // .XmsgApCfgXscTcpServer pubTcp = 3;
  if (this->has_pubtcp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pubtcp_);
  }

  // .XmsgApCfgXscHttpServer pubHttp = 4;
  if (this->has_pubhttp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pubhttp_);
  }

  // .XmsgApCfgXscWebSocketServer pubWebSocket = 5;
  if (this->has_pubwebsocket()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pubwebsocket_);
  }

  // .XmsgApCfgXscUdpServer pubUdp = 6;
  if (this->has_pubudp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pubudp_);
  }

  // .XmsgApCfgXscRudpServer pubRudp = 7;
  if (this->has_pubrudp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pubrudp_);
  }

  // .XmsgApCfgXscTcpServer priTcp = 8;
  if (this->has_pritcp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pritcp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgApCfgPb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgApCfgPb)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgApCfgPb* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgApCfgPb>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgApCfgPb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgApCfgPb)
    MergeFrom(*source);
  }
}

void XmsgApCfgPb::MergeFrom(const XmsgApCfgPb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgApCfgPb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  n2h_.MergeFrom(from.n2h_);
  if (from.cgt().size() > 0) {

    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  if (from.has_log()) {
    mutable_log()->::XmsgApCfgLog::MergeFrom(from.log());
  }
  if (from.has_pubtcp()) {
    mutable_pubtcp()->::XmsgApCfgXscTcpServer::MergeFrom(from.pubtcp());
  }
  if (from.has_pubhttp()) {
    mutable_pubhttp()->::XmsgApCfgXscHttpServer::MergeFrom(from.pubhttp());
  }
  if (from.has_pubwebsocket()) {
    mutable_pubwebsocket()->::XmsgApCfgXscWebSocketServer::MergeFrom(from.pubwebsocket());
  }
  if (from.has_pubudp()) {
    mutable_pubudp()->::XmsgApCfgXscUdpServer::MergeFrom(from.pubudp());
  }
  if (from.has_pubrudp()) {
    mutable_pubrudp()->::XmsgApCfgXscRudpServer::MergeFrom(from.pubrudp());
  }
  if (from.has_pritcp()) {
    mutable_pritcp()->::XmsgApCfgXscTcpServer::MergeFrom(from.pritcp());
  }
}

void XmsgApCfgPb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgApCfgPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgApCfgPb::CopyFrom(const XmsgApCfgPb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgApCfgPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgApCfgPb::IsInitialized() const {
  return true;
}

void XmsgApCfgPb::Swap(XmsgApCfgPb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgApCfgPb::InternalSwap(XmsgApCfgPb* other) {
  using std::swap;
  n2h_.InternalSwap(&other->n2h_);
  cgt_.Swap(&other->cgt_);
  swap(log_, other->log_);
  swap(pubtcp_, other->pubtcp_);
  swap(pubhttp_, other->pubhttp_);
  swap(pubwebsocket_, other->pubwebsocket_);
  swap(pubudp_, other->pubudp_);
  swap(pubrudp_, other->pubrudp_);
  swap(pritcp_, other->pritcp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgApCfgPb::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgApCfgXscTcpServer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgApCfgXscTcpServer::kAddrFieldNumber;
const int XmsgApCfgXscTcpServer::kWorkerFieldNumber;
const int XmsgApCfgXscTcpServer::kPeerLimitFieldNumber;
const int XmsgApCfgXscTcpServer::kPeerMtuFieldNumber;
const int XmsgApCfgXscTcpServer::kPeerRcvBufFieldNumber;
const int XmsgApCfgXscTcpServer::kPeerSndBufFieldNumber;
const int XmsgApCfgXscTcpServer::kLazyCloseFieldNumber;
const int XmsgApCfgXscTcpServer::kTracingFieldNumber;
const int XmsgApCfgXscTcpServer::kHeartbeatFieldNumber;
const int XmsgApCfgXscTcpServer::kN2HZombieFieldNumber;
const int XmsgApCfgXscTcpServer::kN2HTransTimeoutFieldNumber;
const int XmsgApCfgXscTcpServer::kN2HTracingFieldNumber;
const int XmsgApCfgXscTcpServer::kH2NReConnFieldNumber;
const int XmsgApCfgXscTcpServer::kH2NTransTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgApCfgXscTcpServer::XmsgApCfgXscTcpServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgXscTcpServer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgApCfgXscTcpServer)
}
XmsgApCfgXscTcpServer::XmsgApCfgXscTcpServer(const XmsgApCfgXscTcpServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  ::memcpy(&worker_, &from.worker_,
    static_cast<size_t>(reinterpret_cast<char*>(&h2ntranstimeout_) -
    reinterpret_cast<char*>(&worker_)) + sizeof(h2ntranstimeout_));
  // @@protoc_insertion_point(copy_constructor:XmsgApCfgXscTcpServer)
}

void XmsgApCfgXscTcpServer::SharedCtor() {
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&worker_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h2ntranstimeout_) -
      reinterpret_cast<char*>(&worker_)) + sizeof(h2ntranstimeout_));
  _cached_size_ = 0;
}

XmsgApCfgXscTcpServer::~XmsgApCfgXscTcpServer() {
  // @@protoc_insertion_point(destructor:XmsgApCfgXscTcpServer)
  SharedDtor();
}

void XmsgApCfgXscTcpServer::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgApCfgXscTcpServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgApCfgXscTcpServer::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgApCfgXscTcpServer& XmsgApCfgXscTcpServer::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgXscTcpServer();
  return *internal_default_instance();
}

XmsgApCfgXscTcpServer* XmsgApCfgXscTcpServer::New(::google::protobuf::Arena* arena) const {
  XmsgApCfgXscTcpServer* n = new XmsgApCfgXscTcpServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgApCfgXscTcpServer::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgApCfgXscTcpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&worker_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h2ntranstimeout_) -
      reinterpret_cast<char*>(&worker_)) + sizeof(h2ntranstimeout_));
  _internal_metadata_.Clear();
}

bool XmsgApCfgXscTcpServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgApCfgXscTcpServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgApCfgXscTcpServer.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 worker = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerLimit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peerlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerMtu = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peermtu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerRcvBuf = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peerrcvbuf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerSndBuf = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peersndbuf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lazyClose = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lazyclose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool tracing = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tracing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 heartbeat = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heartbeat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 n2hZombie = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n2hzombie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 n2hTransTimeout = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n2htranstimeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool n2hTracing = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &n2htracing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 h2nReConn = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h2nreconn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 h2nTransTimeout = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h2ntranstimeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgApCfgXscTcpServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgApCfgXscTcpServer)
  return false;
#undef DO_
}

void XmsgApCfgXscTcpServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgApCfgXscTcpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgApCfgXscTcpServer.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->addr(), output);
  }

  // uint32 worker = 2;
  if (this->worker() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->worker(), output);
  }

  // uint32 peerLimit = 3;
  if (this->peerlimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->peerlimit(), output);
  }

  // uint32 peerMtu = 4;
  if (this->peermtu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->peermtu(), output);
  }

  // uint32 peerRcvBuf = 5;
  if (this->peerrcvbuf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->peerrcvbuf(), output);
  }

  // uint32 peerSndBuf = 6;
  if (this->peersndbuf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->peersndbuf(), output);
  }

  // uint32 lazyClose = 7;
  if (this->lazyclose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lazyclose(), output);
  }

  // bool tracing = 8;
  if (this->tracing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->tracing(), output);
  }

  // uint32 heartbeat = 9;
  if (this->heartbeat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->heartbeat(), output);
  }

  // uint32 n2hZombie = 10;
  if (this->n2hzombie() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->n2hzombie(), output);
  }

  // uint32 n2hTransTimeout = 11;
  if (this->n2htranstimeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->n2htranstimeout(), output);
  }

  // bool n2hTracing = 12;
  if (this->n2htracing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->n2htracing(), output);
  }

  // uint32 h2nReConn = 13;
  if (this->h2nreconn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->h2nreconn(), output);
  }

  // uint32 h2nTransTimeout = 14;
  if (this->h2ntranstimeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->h2ntranstimeout(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgApCfgXscTcpServer)
}

::google::protobuf::uint8* XmsgApCfgXscTcpServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgApCfgXscTcpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgApCfgXscTcpServer.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }

  // uint32 worker = 2;
  if (this->worker() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->worker(), target);
  }

  // uint32 peerLimit = 3;
  if (this->peerlimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->peerlimit(), target);
  }

  // uint32 peerMtu = 4;
  if (this->peermtu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->peermtu(), target);
  }

  // uint32 peerRcvBuf = 5;
  if (this->peerrcvbuf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->peerrcvbuf(), target);
  }

  // uint32 peerSndBuf = 6;
  if (this->peersndbuf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->peersndbuf(), target);
  }

  // uint32 lazyClose = 7;
  if (this->lazyclose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lazyclose(), target);
  }

  // bool tracing = 8;
  if (this->tracing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->tracing(), target);
  }

  // uint32 heartbeat = 9;
  if (this->heartbeat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->heartbeat(), target);
  }

  // uint32 n2hZombie = 10;
  if (this->n2hzombie() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->n2hzombie(), target);
  }

  // uint32 n2hTransTimeout = 11;
  if (this->n2htranstimeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->n2htranstimeout(), target);
  }

  // bool n2hTracing = 12;
  if (this->n2htracing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->n2htracing(), target);
  }

  // uint32 h2nReConn = 13;
  if (this->h2nreconn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->h2nreconn(), target);
  }

  // uint32 h2nTransTimeout = 14;
  if (this->h2ntranstimeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->h2ntranstimeout(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgApCfgXscTcpServer)
  return target;
}

size_t XmsgApCfgXscTcpServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgApCfgXscTcpServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string addr = 1;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  // uint32 worker = 2;
  if (this->worker() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->worker());
  }

  // uint32 peerLimit = 3;
  if (this->peerlimit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peerlimit());
  }

  // uint32 peerMtu = 4;
  if (this->peermtu() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peermtu());
  }

  // uint32 peerRcvBuf = 5;
  if (this->peerrcvbuf() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peerrcvbuf());
  }

  // uint32 peerSndBuf = 6;
  if (this->peersndbuf() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peersndbuf());
  }

  // uint32 lazyClose = 7;
  if (this->lazyclose() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lazyclose());
  }

  // uint32 heartbeat = 9;
  if (this->heartbeat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heartbeat());
  }

  // uint32 n2hZombie = 10;
  if (this->n2hzombie() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->n2hzombie());
  }

  // bool tracing = 8;
  if (this->tracing() != 0) {
    total_size += 1 + 1;
  }

  // bool n2hTracing = 12;
  if (this->n2htracing() != 0) {
    total_size += 1 + 1;
  }

  // uint32 n2hTransTimeout = 11;
  if (this->n2htranstimeout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->n2htranstimeout());
  }

  // uint32 h2nReConn = 13;
  if (this->h2nreconn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->h2nreconn());
  }

  // uint32 h2nTransTimeout = 14;
  if (this->h2ntranstimeout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->h2ntranstimeout());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgApCfgXscTcpServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgApCfgXscTcpServer)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgApCfgXscTcpServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgApCfgXscTcpServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgApCfgXscTcpServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgApCfgXscTcpServer)
    MergeFrom(*source);
  }
}

void XmsgApCfgXscTcpServer::MergeFrom(const XmsgApCfgXscTcpServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgApCfgXscTcpServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  if (from.worker() != 0) {
    set_worker(from.worker());
  }
  if (from.peerlimit() != 0) {
    set_peerlimit(from.peerlimit());
  }
  if (from.peermtu() != 0) {
    set_peermtu(from.peermtu());
  }
  if (from.peerrcvbuf() != 0) {
    set_peerrcvbuf(from.peerrcvbuf());
  }
  if (from.peersndbuf() != 0) {
    set_peersndbuf(from.peersndbuf());
  }
  if (from.lazyclose() != 0) {
    set_lazyclose(from.lazyclose());
  }
  if (from.heartbeat() != 0) {
    set_heartbeat(from.heartbeat());
  }
  if (from.n2hzombie() != 0) {
    set_n2hzombie(from.n2hzombie());
  }
  if (from.tracing() != 0) {
    set_tracing(from.tracing());
  }
  if (from.n2htracing() != 0) {
    set_n2htracing(from.n2htracing());
  }
  if (from.n2htranstimeout() != 0) {
    set_n2htranstimeout(from.n2htranstimeout());
  }
  if (from.h2nreconn() != 0) {
    set_h2nreconn(from.h2nreconn());
  }
  if (from.h2ntranstimeout() != 0) {
    set_h2ntranstimeout(from.h2ntranstimeout());
  }
}

void XmsgApCfgXscTcpServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgApCfgXscTcpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgApCfgXscTcpServer::CopyFrom(const XmsgApCfgXscTcpServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgApCfgXscTcpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgApCfgXscTcpServer::IsInitialized() const {
  return true;
}

void XmsgApCfgXscTcpServer::Swap(XmsgApCfgXscTcpServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgApCfgXscTcpServer::InternalSwap(XmsgApCfgXscTcpServer* other) {
  using std::swap;
  addr_.Swap(&other->addr_);
  swap(worker_, other->worker_);
  swap(peerlimit_, other->peerlimit_);
  swap(peermtu_, other->peermtu_);
  swap(peerrcvbuf_, other->peerrcvbuf_);
  swap(peersndbuf_, other->peersndbuf_);
  swap(lazyclose_, other->lazyclose_);
  swap(heartbeat_, other->heartbeat_);
  swap(n2hzombie_, other->n2hzombie_);
  swap(tracing_, other->tracing_);
  swap(n2htracing_, other->n2htracing_);
  swap(n2htranstimeout_, other->n2htranstimeout_);
  swap(h2nreconn_, other->h2nreconn_);
  swap(h2ntranstimeout_, other->h2ntranstimeout_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgApCfgXscTcpServer::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgApCfgXscHttpServer::InitAsDefaultInstance() {
  ::_XmsgApCfgXscHttpServer_default_instance_._instance.get_mutable()->tcp_ = const_cast< ::XmsgApCfgXscTcpServer*>(
      ::XmsgApCfgXscTcpServer::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgApCfgXscHttpServer::kTcpFieldNumber;
const int XmsgApCfgXscHttpServer::kHeaderLimitFieldNumber;
const int XmsgApCfgXscHttpServer::kBodyLimitFieldNumber;
const int XmsgApCfgXscHttpServer::kCloseWaitFieldNumber;
const int XmsgApCfgXscHttpServer::kRequiredHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgApCfgXscHttpServer::XmsgApCfgXscHttpServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgXscHttpServer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgApCfgXscHttpServer)
}
XmsgApCfgXscHttpServer::XmsgApCfgXscHttpServer(const XmsgApCfgXscHttpServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      requiredheader_(from.requiredheader_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tcp()) {
    tcp_ = new ::XmsgApCfgXscTcpServer(*from.tcp_);
  } else {
    tcp_ = NULL;
  }
  ::memcpy(&headerlimit_, &from.headerlimit_,
    static_cast<size_t>(reinterpret_cast<char*>(&closewait_) -
    reinterpret_cast<char*>(&headerlimit_)) + sizeof(closewait_));
  // @@protoc_insertion_point(copy_constructor:XmsgApCfgXscHttpServer)
}

void XmsgApCfgXscHttpServer::SharedCtor() {
  ::memset(&tcp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&closewait_) -
      reinterpret_cast<char*>(&tcp_)) + sizeof(closewait_));
  _cached_size_ = 0;
}

XmsgApCfgXscHttpServer::~XmsgApCfgXscHttpServer() {
  // @@protoc_insertion_point(destructor:XmsgApCfgXscHttpServer)
  SharedDtor();
}

void XmsgApCfgXscHttpServer::SharedDtor() {
  if (this != internal_default_instance()) delete tcp_;
}

void XmsgApCfgXscHttpServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgApCfgXscHttpServer::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgApCfgXscHttpServer& XmsgApCfgXscHttpServer::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgXscHttpServer();
  return *internal_default_instance();
}

XmsgApCfgXscHttpServer* XmsgApCfgXscHttpServer::New(::google::protobuf::Arena* arena) const {
  XmsgApCfgXscHttpServer* n = new XmsgApCfgXscHttpServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgApCfgXscHttpServer::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgApCfgXscHttpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requiredheader_.Clear();
  if (GetArenaNoVirtual() == NULL && tcp_ != NULL) {
    delete tcp_;
  }
  tcp_ = NULL;
  ::memset(&headerlimit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&closewait_) -
      reinterpret_cast<char*>(&headerlimit_)) + sizeof(closewait_));
  _internal_metadata_.Clear();
}

bool XmsgApCfgXscHttpServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgApCfgXscHttpServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .XmsgApCfgXscTcpServer tcp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tcp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 headerLimit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headerlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 bodyLimit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bodylimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 closeWait = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &closewait_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string requiredHeader = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_requiredheader()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->requiredheader(this->requiredheader_size() - 1).data(),
            static_cast<int>(this->requiredheader(this->requiredheader_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgApCfgXscHttpServer.requiredHeader"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgApCfgXscHttpServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgApCfgXscHttpServer)
  return false;
#undef DO_
}

void XmsgApCfgXscHttpServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgApCfgXscHttpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .XmsgApCfgXscTcpServer tcp = 1;
  if (this->has_tcp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tcp_, output);
  }

  // uint32 headerLimit = 2;
  if (this->headerlimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->headerlimit(), output);
  }

  // uint32 bodyLimit = 3;
  if (this->bodylimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bodylimit(), output);
  }

  // uint32 closeWait = 4;
  if (this->closewait() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->closewait(), output);
  }

  // repeated string requiredHeader = 5;
  for (int i = 0, n = this->requiredheader_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->requiredheader(i).data(), static_cast<int>(this->requiredheader(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgApCfgXscHttpServer.requiredHeader");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->requiredheader(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgApCfgXscHttpServer)
}

::google::protobuf::uint8* XmsgApCfgXscHttpServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgApCfgXscHttpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .XmsgApCfgXscTcpServer tcp = 1;
  if (this->has_tcp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->tcp_, deterministic, target);
  }

  // uint32 headerLimit = 2;
  if (this->headerlimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->headerlimit(), target);
  }

  // uint32 bodyLimit = 3;
  if (this->bodylimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bodylimit(), target);
  }

  // uint32 closeWait = 4;
  if (this->closewait() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->closewait(), target);
  }

  // repeated string requiredHeader = 5;
  for (int i = 0, n = this->requiredheader_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->requiredheader(i).data(), static_cast<int>(this->requiredheader(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgApCfgXscHttpServer.requiredHeader");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->requiredheader(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgApCfgXscHttpServer)
  return target;
}

size_t XmsgApCfgXscHttpServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgApCfgXscHttpServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string requiredHeader = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->requiredheader_size());
  for (int i = 0, n = this->requiredheader_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->requiredheader(i));
  }

  // .XmsgApCfgXscTcpServer tcp = 1;
  if (this->has_tcp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tcp_);
  }

  // uint32 headerLimit = 2;
  if (this->headerlimit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->headerlimit());
  }

  // uint32 bodyLimit = 3;
  if (this->bodylimit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bodylimit());
  }

  // uint32 closeWait = 4;
  if (this->closewait() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->closewait());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgApCfgXscHttpServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgApCfgXscHttpServer)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgApCfgXscHttpServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgApCfgXscHttpServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgApCfgXscHttpServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgApCfgXscHttpServer)
    MergeFrom(*source);
  }
}

void XmsgApCfgXscHttpServer::MergeFrom(const XmsgApCfgXscHttpServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgApCfgXscHttpServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requiredheader_.MergeFrom(from.requiredheader_);
  if (from.has_tcp()) {
    mutable_tcp()->::XmsgApCfgXscTcpServer::MergeFrom(from.tcp());
  }
  if (from.headerlimit() != 0) {
    set_headerlimit(from.headerlimit());
  }
  if (from.bodylimit() != 0) {
    set_bodylimit(from.bodylimit());
  }
  if (from.closewait() != 0) {
    set_closewait(from.closewait());
  }
}

void XmsgApCfgXscHttpServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgApCfgXscHttpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgApCfgXscHttpServer::CopyFrom(const XmsgApCfgXscHttpServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgApCfgXscHttpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgApCfgXscHttpServer::IsInitialized() const {
  return true;
}

void XmsgApCfgXscHttpServer::Swap(XmsgApCfgXscHttpServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgApCfgXscHttpServer::InternalSwap(XmsgApCfgXscHttpServer* other) {
  using std::swap;
  requiredheader_.InternalSwap(&other->requiredheader_);
  swap(tcp_, other->tcp_);
  swap(headerlimit_, other->headerlimit_);
  swap(bodylimit_, other->bodylimit_);
  swap(closewait_, other->closewait_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgApCfgXscHttpServer::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgApCfgXscWebSocketServer::InitAsDefaultInstance() {
  ::_XmsgApCfgXscWebSocketServer_default_instance_._instance.get_mutable()->tcp_ = const_cast< ::XmsgApCfgXscTcpServer*>(
      ::XmsgApCfgXscTcpServer::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgApCfgXscWebSocketServer::kTcpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgApCfgXscWebSocketServer::XmsgApCfgXscWebSocketServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgXscWebSocketServer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgApCfgXscWebSocketServer)
}
XmsgApCfgXscWebSocketServer::XmsgApCfgXscWebSocketServer(const XmsgApCfgXscWebSocketServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tcp()) {
    tcp_ = new ::XmsgApCfgXscTcpServer(*from.tcp_);
  } else {
    tcp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:XmsgApCfgXscWebSocketServer)
}

void XmsgApCfgXscWebSocketServer::SharedCtor() {
  tcp_ = NULL;
  _cached_size_ = 0;
}

XmsgApCfgXscWebSocketServer::~XmsgApCfgXscWebSocketServer() {
  // @@protoc_insertion_point(destructor:XmsgApCfgXscWebSocketServer)
  SharedDtor();
}

void XmsgApCfgXscWebSocketServer::SharedDtor() {
  if (this != internal_default_instance()) delete tcp_;
}

void XmsgApCfgXscWebSocketServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgApCfgXscWebSocketServer::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgApCfgXscWebSocketServer& XmsgApCfgXscWebSocketServer::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgXscWebSocketServer();
  return *internal_default_instance();
}

XmsgApCfgXscWebSocketServer* XmsgApCfgXscWebSocketServer::New(::google::protobuf::Arena* arena) const {
  XmsgApCfgXscWebSocketServer* n = new XmsgApCfgXscWebSocketServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgApCfgXscWebSocketServer::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgApCfgXscWebSocketServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tcp_ != NULL) {
    delete tcp_;
  }
  tcp_ = NULL;
  _internal_metadata_.Clear();
}

bool XmsgApCfgXscWebSocketServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgApCfgXscWebSocketServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .XmsgApCfgXscTcpServer tcp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tcp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgApCfgXscWebSocketServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgApCfgXscWebSocketServer)
  return false;
#undef DO_
}

void XmsgApCfgXscWebSocketServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgApCfgXscWebSocketServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .XmsgApCfgXscTcpServer tcp = 1;
  if (this->has_tcp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tcp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgApCfgXscWebSocketServer)
}

::google::protobuf::uint8* XmsgApCfgXscWebSocketServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgApCfgXscWebSocketServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .XmsgApCfgXscTcpServer tcp = 1;
  if (this->has_tcp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->tcp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgApCfgXscWebSocketServer)
  return target;
}

size_t XmsgApCfgXscWebSocketServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgApCfgXscWebSocketServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .XmsgApCfgXscTcpServer tcp = 1;
  if (this->has_tcp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tcp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgApCfgXscWebSocketServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgApCfgXscWebSocketServer)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgApCfgXscWebSocketServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgApCfgXscWebSocketServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgApCfgXscWebSocketServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgApCfgXscWebSocketServer)
    MergeFrom(*source);
  }
}

void XmsgApCfgXscWebSocketServer::MergeFrom(const XmsgApCfgXscWebSocketServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgApCfgXscWebSocketServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tcp()) {
    mutable_tcp()->::XmsgApCfgXscTcpServer::MergeFrom(from.tcp());
  }
}

void XmsgApCfgXscWebSocketServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgApCfgXscWebSocketServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgApCfgXscWebSocketServer::CopyFrom(const XmsgApCfgXscWebSocketServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgApCfgXscWebSocketServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgApCfgXscWebSocketServer::IsInitialized() const {
  return true;
}

void XmsgApCfgXscWebSocketServer::Swap(XmsgApCfgXscWebSocketServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgApCfgXscWebSocketServer::InternalSwap(XmsgApCfgXscWebSocketServer* other) {
  using std::swap;
  swap(tcp_, other->tcp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgApCfgXscWebSocketServer::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgApCfgXscUdpServer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgApCfgXscUdpServer::kAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgApCfgXscUdpServer::XmsgApCfgXscUdpServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgXscUdpServer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgApCfgXscUdpServer)
}
XmsgApCfgXscUdpServer::XmsgApCfgXscUdpServer(const XmsgApCfgXscUdpServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgApCfgXscUdpServer)
}

void XmsgApCfgXscUdpServer::SharedCtor() {
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgApCfgXscUdpServer::~XmsgApCfgXscUdpServer() {
  // @@protoc_insertion_point(destructor:XmsgApCfgXscUdpServer)
  SharedDtor();
}

void XmsgApCfgXscUdpServer::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgApCfgXscUdpServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgApCfgXscUdpServer::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgApCfgXscUdpServer& XmsgApCfgXscUdpServer::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgXscUdpServer();
  return *internal_default_instance();
}

XmsgApCfgXscUdpServer* XmsgApCfgXscUdpServer::New(::google::protobuf::Arena* arena) const {
  XmsgApCfgXscUdpServer* n = new XmsgApCfgXscUdpServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgApCfgXscUdpServer::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgApCfgXscUdpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgApCfgXscUdpServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgApCfgXscUdpServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgApCfgXscUdpServer.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgApCfgXscUdpServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgApCfgXscUdpServer)
  return false;
#undef DO_
}

void XmsgApCfgXscUdpServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgApCfgXscUdpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgApCfgXscUdpServer.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->addr(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgApCfgXscUdpServer)
}

::google::protobuf::uint8* XmsgApCfgXscUdpServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgApCfgXscUdpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgApCfgXscUdpServer.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgApCfgXscUdpServer)
  return target;
}

size_t XmsgApCfgXscUdpServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgApCfgXscUdpServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string addr = 1;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgApCfgXscUdpServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgApCfgXscUdpServer)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgApCfgXscUdpServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgApCfgXscUdpServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgApCfgXscUdpServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgApCfgXscUdpServer)
    MergeFrom(*source);
  }
}

void XmsgApCfgXscUdpServer::MergeFrom(const XmsgApCfgXscUdpServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgApCfgXscUdpServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
}

void XmsgApCfgXscUdpServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgApCfgXscUdpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgApCfgXscUdpServer::CopyFrom(const XmsgApCfgXscUdpServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgApCfgXscUdpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgApCfgXscUdpServer::IsInitialized() const {
  return true;
}

void XmsgApCfgXscUdpServer::Swap(XmsgApCfgXscUdpServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgApCfgXscUdpServer::InternalSwap(XmsgApCfgXscUdpServer* other) {
  using std::swap;
  addr_.Swap(&other->addr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgApCfgXscUdpServer::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgApCfgXscRudpServer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgApCfgXscRudpServer::kAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgApCfgXscRudpServer::XmsgApCfgXscRudpServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgXscRudpServer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgApCfgXscRudpServer)
}
XmsgApCfgXscRudpServer::XmsgApCfgXscRudpServer(const XmsgApCfgXscRudpServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgApCfgXscRudpServer)
}

void XmsgApCfgXscRudpServer::SharedCtor() {
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgApCfgXscRudpServer::~XmsgApCfgXscRudpServer() {
  // @@protoc_insertion_point(destructor:XmsgApCfgXscRudpServer)
  SharedDtor();
}

void XmsgApCfgXscRudpServer::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgApCfgXscRudpServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgApCfgXscRudpServer::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgApCfgXscRudpServer& XmsgApCfgXscRudpServer::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgXscRudpServer();
  return *internal_default_instance();
}

XmsgApCfgXscRudpServer* XmsgApCfgXscRudpServer::New(::google::protobuf::Arena* arena) const {
  XmsgApCfgXscRudpServer* n = new XmsgApCfgXscRudpServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgApCfgXscRudpServer::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgApCfgXscRudpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgApCfgXscRudpServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgApCfgXscRudpServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgApCfgXscRudpServer.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgApCfgXscRudpServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgApCfgXscRudpServer)
  return false;
#undef DO_
}

void XmsgApCfgXscRudpServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgApCfgXscRudpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgApCfgXscRudpServer.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->addr(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgApCfgXscRudpServer)
}

::google::protobuf::uint8* XmsgApCfgXscRudpServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgApCfgXscRudpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgApCfgXscRudpServer.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgApCfgXscRudpServer)
  return target;
}

size_t XmsgApCfgXscRudpServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgApCfgXscRudpServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string addr = 1;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgApCfgXscRudpServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgApCfgXscRudpServer)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgApCfgXscRudpServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgApCfgXscRudpServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgApCfgXscRudpServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgApCfgXscRudpServer)
    MergeFrom(*source);
  }
}

void XmsgApCfgXscRudpServer::MergeFrom(const XmsgApCfgXscRudpServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgApCfgXscRudpServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
}

void XmsgApCfgXscRudpServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgApCfgXscRudpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgApCfgXscRudpServer::CopyFrom(const XmsgApCfgXscRudpServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgApCfgXscRudpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgApCfgXscRudpServer::IsInitialized() const {
  return true;
}

void XmsgApCfgXscRudpServer::Swap(XmsgApCfgXscRudpServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgApCfgXscRudpServer::InternalSwap(XmsgApCfgXscRudpServer* other) {
  using std::swap;
  addr_.Swap(&other->addr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgApCfgXscRudpServer::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgApCfgLog::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgApCfgLog::kLevelFieldNumber;
const int XmsgApCfgLog::kOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgApCfgLog::XmsgApCfgLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgLog();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgApCfgLog)
}
XmsgApCfgLog::XmsgApCfgLog(const XmsgApCfgLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.level().size() > 0) {
    level_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_);
  }
  output_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.output().size() > 0) {
    output_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgApCfgLog)
}

void XmsgApCfgLog::SharedCtor() {
  level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgApCfgLog::~XmsgApCfgLog() {
  // @@protoc_insertion_point(destructor:XmsgApCfgLog)
  SharedDtor();
}

void XmsgApCfgLog::SharedDtor() {
  level_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgApCfgLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgApCfgLog::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgApCfgLog& XmsgApCfgLog::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgLog();
  return *internal_default_instance();
}

XmsgApCfgLog* XmsgApCfgLog::New(::google::protobuf::Arena* arena) const {
  XmsgApCfgLog* n = new XmsgApCfgLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgApCfgLog::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgApCfgLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgApCfgLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgApCfgLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_level()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->level().data(), static_cast<int>(this->level().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgApCfgLog.level"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string output = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output().data(), static_cast<int>(this->output().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgApCfgLog.output"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgApCfgLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgApCfgLog)
  return false;
#undef DO_
}

void XmsgApCfgLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgApCfgLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string level = 1;
  if (this->level().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->level().data(), static_cast<int>(this->level().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgApCfgLog.level");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->level(), output);
  }

  // string output = 2;
  if (this->output().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output().data(), static_cast<int>(this->output().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgApCfgLog.output");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->output(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgApCfgLog)
}

::google::protobuf::uint8* XmsgApCfgLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgApCfgLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string level = 1;
  if (this->level().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->level().data(), static_cast<int>(this->level().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgApCfgLog.level");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->level(), target);
  }

  // string output = 2;
  if (this->output().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output().data(), static_cast<int>(this->output().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgApCfgLog.output");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->output(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgApCfgLog)
  return target;
}

size_t XmsgApCfgLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgApCfgLog)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string level = 1;
  if (this->level().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->level());
  }

  // string output = 2;
  if (this->output().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgApCfgLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgApCfgLog)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgApCfgLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgApCfgLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgApCfgLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgApCfgLog)
    MergeFrom(*source);
  }
}

void XmsgApCfgLog::MergeFrom(const XmsgApCfgLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgApCfgLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level().size() > 0) {

    level_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_);
  }
  if (from.output().size() > 0) {

    output_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_);
  }
}

void XmsgApCfgLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgApCfgLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgApCfgLog::CopyFrom(const XmsgApCfgLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgApCfgLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgApCfgLog::IsInitialized() const {
  return true;
}

void XmsgApCfgLog::Swap(XmsgApCfgLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgApCfgLog::InternalSwap(XmsgApCfgLog* other) {
  using std::swap;
  level_.Swap(&other->level_);
  output_.Swap(&other->output_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgApCfgLog::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImApCfgXmsgNeN2hAddr::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImApCfgXmsgNeN2hAddr::kNegFieldNumber;
const int XmsgImApCfgXmsgNeN2hAddr::kCgtFieldNumber;
const int XmsgImApCfgXmsgNeN2hAddr::kPrefixFieldNumber;
const int XmsgImApCfgXmsgNeN2hAddr::kPwdFieldNumber;
const int XmsgImApCfgXmsgNeN2hAddr::kAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImApCfgXmsgNeN2hAddr::XmsgImApCfgXmsgNeN2hAddr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgImApCfgXmsgNeN2hAddr();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImApCfgXmsgNeN2hAddr)
}
XmsgImApCfgXmsgNeN2hAddr::XmsgImApCfgXmsgNeN2hAddr(const XmsgImApCfgXmsgNeN2hAddr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.neg().size() > 0) {
    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cgt().size() > 0) {
    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prefix().size() > 0) {
    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pwd().size() > 0) {
    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgImApCfgXmsgNeN2hAddr)
}

void XmsgImApCfgXmsgNeN2hAddr::SharedCtor() {
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgImApCfgXmsgNeN2hAddr::~XmsgImApCfgXmsgNeN2hAddr() {
  // @@protoc_insertion_point(destructor:XmsgImApCfgXmsgNeN2hAddr)
  SharedDtor();
}

void XmsgImApCfgXmsgNeN2hAddr::SharedDtor() {
  neg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImApCfgXmsgNeN2hAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImApCfgXmsgNeN2hAddr::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImApCfgXmsgNeN2hAddr& XmsgImApCfgXmsgNeN2hAddr::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgImApCfgXmsgNeN2hAddr();
  return *internal_default_instance();
}

XmsgImApCfgXmsgNeN2hAddr* XmsgImApCfgXmsgNeN2hAddr::New(::google::protobuf::Arena* arena) const {
  XmsgImApCfgXmsgNeN2hAddr* n = new XmsgImApCfgXmsgNeN2hAddr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImApCfgXmsgNeN2hAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImApCfgXmsgNeN2hAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgImApCfgXmsgNeN2hAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImApCfgXmsgNeN2hAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string neg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_neg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->neg().data(), static_cast<int>(this->neg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImApCfgXmsgNeN2hAddr.neg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cgt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cgt().data(), static_cast<int>(this->cgt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImApCfgXmsgNeN2hAddr.cgt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prefix = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prefix().data(), static_cast<int>(this->prefix().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImApCfgXmsgNeN2hAddr.prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pwd = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pwd().data(), static_cast<int>(this->pwd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImApCfgXmsgNeN2hAddr.pwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string addr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImApCfgXmsgNeN2hAddr.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImApCfgXmsgNeN2hAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImApCfgXmsgNeN2hAddr)
  return false;
#undef DO_
}

void XmsgImApCfgXmsgNeN2hAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImApCfgXmsgNeN2hAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImApCfgXmsgNeN2hAddr.neg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->neg(), output);
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImApCfgXmsgNeN2hAddr.cgt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cgt(), output);
  }

  // string prefix = 3;
  if (this->prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImApCfgXmsgNeN2hAddr.prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->prefix(), output);
  }

  // string pwd = 4;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImApCfgXmsgNeN2hAddr.pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pwd(), output);
  }

  // string addr = 5;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImApCfgXmsgNeN2hAddr.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->addr(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImApCfgXmsgNeN2hAddr)
}

::google::protobuf::uint8* XmsgImApCfgXmsgNeN2hAddr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImApCfgXmsgNeN2hAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImApCfgXmsgNeN2hAddr.neg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->neg(), target);
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImApCfgXmsgNeN2hAddr.cgt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cgt(), target);
  }

  // string prefix = 3;
  if (this->prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImApCfgXmsgNeN2hAddr.prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->prefix(), target);
  }

  // string pwd = 4;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImApCfgXmsgNeN2hAddr.pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pwd(), target);
  }

  // string addr = 5;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImApCfgXmsgNeN2hAddr.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->addr(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImApCfgXmsgNeN2hAddr)
  return target;
}

size_t XmsgImApCfgXmsgNeN2hAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImApCfgXmsgNeN2hAddr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string neg = 1;
  if (this->neg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->neg());
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cgt());
  }

  // string prefix = 3;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prefix());
  }

  // string pwd = 4;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pwd());
  }

  // string addr = 5;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImApCfgXmsgNeN2hAddr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImApCfgXmsgNeN2hAddr)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImApCfgXmsgNeN2hAddr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImApCfgXmsgNeN2hAddr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImApCfgXmsgNeN2hAddr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImApCfgXmsgNeN2hAddr)
    MergeFrom(*source);
  }
}

void XmsgImApCfgXmsgNeN2hAddr::MergeFrom(const XmsgImApCfgXmsgNeN2hAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImApCfgXmsgNeN2hAddr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.neg().size() > 0) {

    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  if (from.cgt().size() > 0) {

    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  if (from.prefix().size() > 0) {

    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  if (from.pwd().size() > 0) {

    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
}

void XmsgImApCfgXmsgNeN2hAddr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImApCfgXmsgNeN2hAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImApCfgXmsgNeN2hAddr::CopyFrom(const XmsgImApCfgXmsgNeN2hAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImApCfgXmsgNeN2hAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImApCfgXmsgNeN2hAddr::IsInitialized() const {
  return true;
}

void XmsgImApCfgXmsgNeN2hAddr::Swap(XmsgImApCfgXmsgNeN2hAddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImApCfgXmsgNeN2hAddr::InternalSwap(XmsgImApCfgXmsgNeN2hAddr* other) {
  using std::swap;
  neg_.Swap(&other->neg_);
  cgt_.Swap(&other->cgt_);
  prefix_.Swap(&other->prefix_);
  pwd_.Swap(&other->pwd_);
  addr_.Swap(&other->addr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImApCfgXmsgNeN2hAddr::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
