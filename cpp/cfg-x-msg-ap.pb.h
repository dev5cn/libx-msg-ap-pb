// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cfg-x-msg-ap.proto

#ifndef PROTOBUF_cfg_2dx_2dmsg_2dap_2eproto__INCLUDED
#define PROTOBUF_cfg_2dx_2dmsg_2dap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_cfg_2dx_2dmsg_2dap_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsXmsgApCfgPbImpl();
void InitDefaultsXmsgApCfgPb();
void InitDefaultsXmsgApCfgXscTcpServerImpl();
void InitDefaultsXmsgApCfgXscTcpServer();
void InitDefaultsXmsgApCfgXscHttpServerImpl();
void InitDefaultsXmsgApCfgXscHttpServer();
void InitDefaultsXmsgApCfgXscWebSocketServerImpl();
void InitDefaultsXmsgApCfgXscWebSocketServer();
void InitDefaultsXmsgApCfgXscUdpServerImpl();
void InitDefaultsXmsgApCfgXscUdpServer();
void InitDefaultsXmsgApCfgXscRudpServerImpl();
void InitDefaultsXmsgApCfgXscRudpServer();
void InitDefaultsXmsgApCfgLogImpl();
void InitDefaultsXmsgApCfgLog();
void InitDefaultsXmsgImApCfgXmsgNeN2hAddrImpl();
void InitDefaultsXmsgImApCfgXmsgNeN2hAddr();
inline void InitDefaults() {
  InitDefaultsXmsgApCfgPb();
  InitDefaultsXmsgApCfgXscTcpServer();
  InitDefaultsXmsgApCfgXscHttpServer();
  InitDefaultsXmsgApCfgXscWebSocketServer();
  InitDefaultsXmsgApCfgXscUdpServer();
  InitDefaultsXmsgApCfgXscRudpServer();
  InitDefaultsXmsgApCfgLog();
  InitDefaultsXmsgImApCfgXmsgNeN2hAddr();
}
}  // namespace protobuf_cfg_2dx_2dmsg_2dap_2eproto
class XmsgApCfgLog;
class XmsgApCfgLogDefaultTypeInternal;
extern XmsgApCfgLogDefaultTypeInternal _XmsgApCfgLog_default_instance_;
class XmsgApCfgPb;
class XmsgApCfgPbDefaultTypeInternal;
extern XmsgApCfgPbDefaultTypeInternal _XmsgApCfgPb_default_instance_;
class XmsgApCfgXscHttpServer;
class XmsgApCfgXscHttpServerDefaultTypeInternal;
extern XmsgApCfgXscHttpServerDefaultTypeInternal _XmsgApCfgXscHttpServer_default_instance_;
class XmsgApCfgXscRudpServer;
class XmsgApCfgXscRudpServerDefaultTypeInternal;
extern XmsgApCfgXscRudpServerDefaultTypeInternal _XmsgApCfgXscRudpServer_default_instance_;
class XmsgApCfgXscTcpServer;
class XmsgApCfgXscTcpServerDefaultTypeInternal;
extern XmsgApCfgXscTcpServerDefaultTypeInternal _XmsgApCfgXscTcpServer_default_instance_;
class XmsgApCfgXscUdpServer;
class XmsgApCfgXscUdpServerDefaultTypeInternal;
extern XmsgApCfgXscUdpServerDefaultTypeInternal _XmsgApCfgXscUdpServer_default_instance_;
class XmsgApCfgXscWebSocketServer;
class XmsgApCfgXscWebSocketServerDefaultTypeInternal;
extern XmsgApCfgXscWebSocketServerDefaultTypeInternal _XmsgApCfgXscWebSocketServer_default_instance_;
class XmsgImApCfgXmsgNeN2hAddr;
class XmsgImApCfgXmsgNeN2hAddrDefaultTypeInternal;
extern XmsgImApCfgXmsgNeN2hAddrDefaultTypeInternal _XmsgImApCfgXmsgNeN2hAddr_default_instance_;

// ===================================================================

class XmsgApCfgPb : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgApCfgPb) */ {
 public:
  XmsgApCfgPb();
  virtual ~XmsgApCfgPb();

  XmsgApCfgPb(const XmsgApCfgPb& from);

  inline XmsgApCfgPb& operator=(const XmsgApCfgPb& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgApCfgPb(XmsgApCfgPb&& from) noexcept
    : XmsgApCfgPb() {
    *this = ::std::move(from);
  }

  inline XmsgApCfgPb& operator=(XmsgApCfgPb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgApCfgPb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgApCfgPb* internal_default_instance() {
    return reinterpret_cast<const XmsgApCfgPb*>(
               &_XmsgApCfgPb_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(XmsgApCfgPb* other);
  friend void swap(XmsgApCfgPb& a, XmsgApCfgPb& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgApCfgPb* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgApCfgPb* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgApCfgPb& from);
  void MergeFrom(const XmsgApCfgPb& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgApCfgPb* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .XmsgImApCfgXmsgNeN2hAddr n2h = 9;
  int n2h_size() const;
  void clear_n2h();
  static const int kN2HFieldNumber = 9;
  const ::XmsgImApCfgXmsgNeN2hAddr& n2h(int index) const;
  ::XmsgImApCfgXmsgNeN2hAddr* mutable_n2h(int index);
  ::XmsgImApCfgXmsgNeN2hAddr* add_n2h();
  ::google::protobuf::RepeatedPtrField< ::XmsgImApCfgXmsgNeN2hAddr >*
      mutable_n2h();
  const ::google::protobuf::RepeatedPtrField< ::XmsgImApCfgXmsgNeN2hAddr >&
      n2h() const;

  // string cgt = 1;
  void clear_cgt();
  static const int kCgtFieldNumber = 1;
  const ::std::string& cgt() const;
  void set_cgt(const ::std::string& value);
  #if LANG_CXX11
  void set_cgt(::std::string&& value);
  #endif
  void set_cgt(const char* value);
  void set_cgt(const char* value, size_t size);
  ::std::string* mutable_cgt();
  ::std::string* release_cgt();
  void set_allocated_cgt(::std::string* cgt);

  // .XmsgApCfgLog log = 2;
  bool has_log() const;
  void clear_log();
  static const int kLogFieldNumber = 2;
  const ::XmsgApCfgLog& log() const;
  ::XmsgApCfgLog* release_log();
  ::XmsgApCfgLog* mutable_log();
  void set_allocated_log(::XmsgApCfgLog* log);

  // .XmsgApCfgXscTcpServer pubTcp = 3;
  bool has_pubtcp() const;
  void clear_pubtcp();
  static const int kPubTcpFieldNumber = 3;
  const ::XmsgApCfgXscTcpServer& pubtcp() const;
  ::XmsgApCfgXscTcpServer* release_pubtcp();
  ::XmsgApCfgXscTcpServer* mutable_pubtcp();
  void set_allocated_pubtcp(::XmsgApCfgXscTcpServer* pubtcp);

  // .XmsgApCfgXscHttpServer pubHttp = 4;
  bool has_pubhttp() const;
  void clear_pubhttp();
  static const int kPubHttpFieldNumber = 4;
  const ::XmsgApCfgXscHttpServer& pubhttp() const;
  ::XmsgApCfgXscHttpServer* release_pubhttp();
  ::XmsgApCfgXscHttpServer* mutable_pubhttp();
  void set_allocated_pubhttp(::XmsgApCfgXscHttpServer* pubhttp);

  // .XmsgApCfgXscWebSocketServer pubWebSocket = 5;
  bool has_pubwebsocket() const;
  void clear_pubwebsocket();
  static const int kPubWebSocketFieldNumber = 5;
  const ::XmsgApCfgXscWebSocketServer& pubwebsocket() const;
  ::XmsgApCfgXscWebSocketServer* release_pubwebsocket();
  ::XmsgApCfgXscWebSocketServer* mutable_pubwebsocket();
  void set_allocated_pubwebsocket(::XmsgApCfgXscWebSocketServer* pubwebsocket);

  // .XmsgApCfgXscUdpServer pubUdp = 6;
  bool has_pubudp() const;
  void clear_pubudp();
  static const int kPubUdpFieldNumber = 6;
  const ::XmsgApCfgXscUdpServer& pubudp() const;
  ::XmsgApCfgXscUdpServer* release_pubudp();
  ::XmsgApCfgXscUdpServer* mutable_pubudp();
  void set_allocated_pubudp(::XmsgApCfgXscUdpServer* pubudp);

  // .XmsgApCfgXscRudpServer pubRudp = 7;
  bool has_pubrudp() const;
  void clear_pubrudp();
  static const int kPubRudpFieldNumber = 7;
  const ::XmsgApCfgXscRudpServer& pubrudp() const;
  ::XmsgApCfgXscRudpServer* release_pubrudp();
  ::XmsgApCfgXscRudpServer* mutable_pubrudp();
  void set_allocated_pubrudp(::XmsgApCfgXscRudpServer* pubrudp);

  // .XmsgApCfgXscTcpServer priTcp = 8;
  bool has_pritcp() const;
  void clear_pritcp();
  static const int kPriTcpFieldNumber = 8;
  const ::XmsgApCfgXscTcpServer& pritcp() const;
  ::XmsgApCfgXscTcpServer* release_pritcp();
  ::XmsgApCfgXscTcpServer* mutable_pritcp();
  void set_allocated_pritcp(::XmsgApCfgXscTcpServer* pritcp);

  // @@protoc_insertion_point(class_scope:XmsgApCfgPb)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::XmsgImApCfgXmsgNeN2hAddr > n2h_;
  ::google::protobuf::internal::ArenaStringPtr cgt_;
  ::XmsgApCfgLog* log_;
  ::XmsgApCfgXscTcpServer* pubtcp_;
  ::XmsgApCfgXscHttpServer* pubhttp_;
  ::XmsgApCfgXscWebSocketServer* pubwebsocket_;
  ::XmsgApCfgXscUdpServer* pubudp_;
  ::XmsgApCfgXscRudpServer* pubrudp_;
  ::XmsgApCfgXscTcpServer* pritcp_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgPbImpl();
};
// -------------------------------------------------------------------

class XmsgApCfgXscTcpServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgApCfgXscTcpServer) */ {
 public:
  XmsgApCfgXscTcpServer();
  virtual ~XmsgApCfgXscTcpServer();

  XmsgApCfgXscTcpServer(const XmsgApCfgXscTcpServer& from);

  inline XmsgApCfgXscTcpServer& operator=(const XmsgApCfgXscTcpServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgApCfgXscTcpServer(XmsgApCfgXscTcpServer&& from) noexcept
    : XmsgApCfgXscTcpServer() {
    *this = ::std::move(from);
  }

  inline XmsgApCfgXscTcpServer& operator=(XmsgApCfgXscTcpServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgApCfgXscTcpServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgApCfgXscTcpServer* internal_default_instance() {
    return reinterpret_cast<const XmsgApCfgXscTcpServer*>(
               &_XmsgApCfgXscTcpServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(XmsgApCfgXscTcpServer* other);
  friend void swap(XmsgApCfgXscTcpServer& a, XmsgApCfgXscTcpServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgApCfgXscTcpServer* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgApCfgXscTcpServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgApCfgXscTcpServer& from);
  void MergeFrom(const XmsgApCfgXscTcpServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgApCfgXscTcpServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string addr = 1;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // uint32 worker = 2;
  void clear_worker();
  static const int kWorkerFieldNumber = 2;
  ::google::protobuf::uint32 worker() const;
  void set_worker(::google::protobuf::uint32 value);

  // uint32 peerLimit = 3;
  void clear_peerlimit();
  static const int kPeerLimitFieldNumber = 3;
  ::google::protobuf::uint32 peerlimit() const;
  void set_peerlimit(::google::protobuf::uint32 value);

  // uint32 peerMtu = 4;
  void clear_peermtu();
  static const int kPeerMtuFieldNumber = 4;
  ::google::protobuf::uint32 peermtu() const;
  void set_peermtu(::google::protobuf::uint32 value);

  // uint32 peerRcvBuf = 5;
  void clear_peerrcvbuf();
  static const int kPeerRcvBufFieldNumber = 5;
  ::google::protobuf::uint32 peerrcvbuf() const;
  void set_peerrcvbuf(::google::protobuf::uint32 value);

  // uint32 peerSndBuf = 6;
  void clear_peersndbuf();
  static const int kPeerSndBufFieldNumber = 6;
  ::google::protobuf::uint32 peersndbuf() const;
  void set_peersndbuf(::google::protobuf::uint32 value);

  // uint32 lazyClose = 7;
  void clear_lazyclose();
  static const int kLazyCloseFieldNumber = 7;
  ::google::protobuf::uint32 lazyclose() const;
  void set_lazyclose(::google::protobuf::uint32 value);

  // uint32 heartbeat = 9;
  void clear_heartbeat();
  static const int kHeartbeatFieldNumber = 9;
  ::google::protobuf::uint32 heartbeat() const;
  void set_heartbeat(::google::protobuf::uint32 value);

  // uint32 n2hZombie = 10;
  void clear_n2hzombie();
  static const int kN2HZombieFieldNumber = 10;
  ::google::protobuf::uint32 n2hzombie() const;
  void set_n2hzombie(::google::protobuf::uint32 value);

  // bool tracing = 8;
  void clear_tracing();
  static const int kTracingFieldNumber = 8;
  bool tracing() const;
  void set_tracing(bool value);

  // bool n2hTracing = 12;
  void clear_n2htracing();
  static const int kN2HTracingFieldNumber = 12;
  bool n2htracing() const;
  void set_n2htracing(bool value);

  // uint32 n2hTransTimeout = 11;
  void clear_n2htranstimeout();
  static const int kN2HTransTimeoutFieldNumber = 11;
  ::google::protobuf::uint32 n2htranstimeout() const;
  void set_n2htranstimeout(::google::protobuf::uint32 value);

  // uint32 h2nReConn = 13;
  void clear_h2nreconn();
  static const int kH2NReConnFieldNumber = 13;
  ::google::protobuf::uint32 h2nreconn() const;
  void set_h2nreconn(::google::protobuf::uint32 value);

  // uint32 h2nTransTimeout = 14;
  void clear_h2ntranstimeout();
  static const int kH2NTransTimeoutFieldNumber = 14;
  ::google::protobuf::uint32 h2ntranstimeout() const;
  void set_h2ntranstimeout(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgApCfgXscTcpServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::uint32 worker_;
  ::google::protobuf::uint32 peerlimit_;
  ::google::protobuf::uint32 peermtu_;
  ::google::protobuf::uint32 peerrcvbuf_;
  ::google::protobuf::uint32 peersndbuf_;
  ::google::protobuf::uint32 lazyclose_;
  ::google::protobuf::uint32 heartbeat_;
  ::google::protobuf::uint32 n2hzombie_;
  bool tracing_;
  bool n2htracing_;
  ::google::protobuf::uint32 n2htranstimeout_;
  ::google::protobuf::uint32 h2nreconn_;
  ::google::protobuf::uint32 h2ntranstimeout_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgXscTcpServerImpl();
};
// -------------------------------------------------------------------

class XmsgApCfgXscHttpServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgApCfgXscHttpServer) */ {
 public:
  XmsgApCfgXscHttpServer();
  virtual ~XmsgApCfgXscHttpServer();

  XmsgApCfgXscHttpServer(const XmsgApCfgXscHttpServer& from);

  inline XmsgApCfgXscHttpServer& operator=(const XmsgApCfgXscHttpServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgApCfgXscHttpServer(XmsgApCfgXscHttpServer&& from) noexcept
    : XmsgApCfgXscHttpServer() {
    *this = ::std::move(from);
  }

  inline XmsgApCfgXscHttpServer& operator=(XmsgApCfgXscHttpServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgApCfgXscHttpServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgApCfgXscHttpServer* internal_default_instance() {
    return reinterpret_cast<const XmsgApCfgXscHttpServer*>(
               &_XmsgApCfgXscHttpServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(XmsgApCfgXscHttpServer* other);
  friend void swap(XmsgApCfgXscHttpServer& a, XmsgApCfgXscHttpServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgApCfgXscHttpServer* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgApCfgXscHttpServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgApCfgXscHttpServer& from);
  void MergeFrom(const XmsgApCfgXscHttpServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgApCfgXscHttpServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string requiredHeader = 5;
  int requiredheader_size() const;
  void clear_requiredheader();
  static const int kRequiredHeaderFieldNumber = 5;
  const ::std::string& requiredheader(int index) const;
  ::std::string* mutable_requiredheader(int index);
  void set_requiredheader(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_requiredheader(int index, ::std::string&& value);
  #endif
  void set_requiredheader(int index, const char* value);
  void set_requiredheader(int index, const char* value, size_t size);
  ::std::string* add_requiredheader();
  void add_requiredheader(const ::std::string& value);
  #if LANG_CXX11
  void add_requiredheader(::std::string&& value);
  #endif
  void add_requiredheader(const char* value);
  void add_requiredheader(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& requiredheader() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_requiredheader();

  // .XmsgApCfgXscTcpServer tcp = 1;
  bool has_tcp() const;
  void clear_tcp();
  static const int kTcpFieldNumber = 1;
  const ::XmsgApCfgXscTcpServer& tcp() const;
  ::XmsgApCfgXscTcpServer* release_tcp();
  ::XmsgApCfgXscTcpServer* mutable_tcp();
  void set_allocated_tcp(::XmsgApCfgXscTcpServer* tcp);

  // uint32 headerLimit = 2;
  void clear_headerlimit();
  static const int kHeaderLimitFieldNumber = 2;
  ::google::protobuf::uint32 headerlimit() const;
  void set_headerlimit(::google::protobuf::uint32 value);

  // uint32 bodyLimit = 3;
  void clear_bodylimit();
  static const int kBodyLimitFieldNumber = 3;
  ::google::protobuf::uint32 bodylimit() const;
  void set_bodylimit(::google::protobuf::uint32 value);

  // uint32 closeWait = 4;
  void clear_closewait();
  static const int kCloseWaitFieldNumber = 4;
  ::google::protobuf::uint32 closewait() const;
  void set_closewait(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgApCfgXscHttpServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> requiredheader_;
  ::XmsgApCfgXscTcpServer* tcp_;
  ::google::protobuf::uint32 headerlimit_;
  ::google::protobuf::uint32 bodylimit_;
  ::google::protobuf::uint32 closewait_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgXscHttpServerImpl();
};
// -------------------------------------------------------------------

class XmsgApCfgXscWebSocketServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgApCfgXscWebSocketServer) */ {
 public:
  XmsgApCfgXscWebSocketServer();
  virtual ~XmsgApCfgXscWebSocketServer();

  XmsgApCfgXscWebSocketServer(const XmsgApCfgXscWebSocketServer& from);

  inline XmsgApCfgXscWebSocketServer& operator=(const XmsgApCfgXscWebSocketServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgApCfgXscWebSocketServer(XmsgApCfgXscWebSocketServer&& from) noexcept
    : XmsgApCfgXscWebSocketServer() {
    *this = ::std::move(from);
  }

  inline XmsgApCfgXscWebSocketServer& operator=(XmsgApCfgXscWebSocketServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgApCfgXscWebSocketServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgApCfgXscWebSocketServer* internal_default_instance() {
    return reinterpret_cast<const XmsgApCfgXscWebSocketServer*>(
               &_XmsgApCfgXscWebSocketServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(XmsgApCfgXscWebSocketServer* other);
  friend void swap(XmsgApCfgXscWebSocketServer& a, XmsgApCfgXscWebSocketServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgApCfgXscWebSocketServer* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgApCfgXscWebSocketServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgApCfgXscWebSocketServer& from);
  void MergeFrom(const XmsgApCfgXscWebSocketServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgApCfgXscWebSocketServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .XmsgApCfgXscTcpServer tcp = 1;
  bool has_tcp() const;
  void clear_tcp();
  static const int kTcpFieldNumber = 1;
  const ::XmsgApCfgXscTcpServer& tcp() const;
  ::XmsgApCfgXscTcpServer* release_tcp();
  ::XmsgApCfgXscTcpServer* mutable_tcp();
  void set_allocated_tcp(::XmsgApCfgXscTcpServer* tcp);

  // @@protoc_insertion_point(class_scope:XmsgApCfgXscWebSocketServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::XmsgApCfgXscTcpServer* tcp_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgXscWebSocketServerImpl();
};
// -------------------------------------------------------------------

class XmsgApCfgXscUdpServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgApCfgXscUdpServer) */ {
 public:
  XmsgApCfgXscUdpServer();
  virtual ~XmsgApCfgXscUdpServer();

  XmsgApCfgXscUdpServer(const XmsgApCfgXscUdpServer& from);

  inline XmsgApCfgXscUdpServer& operator=(const XmsgApCfgXscUdpServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgApCfgXscUdpServer(XmsgApCfgXscUdpServer&& from) noexcept
    : XmsgApCfgXscUdpServer() {
    *this = ::std::move(from);
  }

  inline XmsgApCfgXscUdpServer& operator=(XmsgApCfgXscUdpServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgApCfgXscUdpServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgApCfgXscUdpServer* internal_default_instance() {
    return reinterpret_cast<const XmsgApCfgXscUdpServer*>(
               &_XmsgApCfgXscUdpServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(XmsgApCfgXscUdpServer* other);
  friend void swap(XmsgApCfgXscUdpServer& a, XmsgApCfgXscUdpServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgApCfgXscUdpServer* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgApCfgXscUdpServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgApCfgXscUdpServer& from);
  void MergeFrom(const XmsgApCfgXscUdpServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgApCfgXscUdpServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string addr = 1;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // @@protoc_insertion_point(class_scope:XmsgApCfgXscUdpServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgXscUdpServerImpl();
};
// -------------------------------------------------------------------

class XmsgApCfgXscRudpServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgApCfgXscRudpServer) */ {
 public:
  XmsgApCfgXscRudpServer();
  virtual ~XmsgApCfgXscRudpServer();

  XmsgApCfgXscRudpServer(const XmsgApCfgXscRudpServer& from);

  inline XmsgApCfgXscRudpServer& operator=(const XmsgApCfgXscRudpServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgApCfgXscRudpServer(XmsgApCfgXscRudpServer&& from) noexcept
    : XmsgApCfgXscRudpServer() {
    *this = ::std::move(from);
  }

  inline XmsgApCfgXscRudpServer& operator=(XmsgApCfgXscRudpServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgApCfgXscRudpServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgApCfgXscRudpServer* internal_default_instance() {
    return reinterpret_cast<const XmsgApCfgXscRudpServer*>(
               &_XmsgApCfgXscRudpServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(XmsgApCfgXscRudpServer* other);
  friend void swap(XmsgApCfgXscRudpServer& a, XmsgApCfgXscRudpServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgApCfgXscRudpServer* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgApCfgXscRudpServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgApCfgXscRudpServer& from);
  void MergeFrom(const XmsgApCfgXscRudpServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgApCfgXscRudpServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string addr = 1;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // @@protoc_insertion_point(class_scope:XmsgApCfgXscRudpServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgXscRudpServerImpl();
};
// -------------------------------------------------------------------

class XmsgApCfgLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgApCfgLog) */ {
 public:
  XmsgApCfgLog();
  virtual ~XmsgApCfgLog();

  XmsgApCfgLog(const XmsgApCfgLog& from);

  inline XmsgApCfgLog& operator=(const XmsgApCfgLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgApCfgLog(XmsgApCfgLog&& from) noexcept
    : XmsgApCfgLog() {
    *this = ::std::move(from);
  }

  inline XmsgApCfgLog& operator=(XmsgApCfgLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgApCfgLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgApCfgLog* internal_default_instance() {
    return reinterpret_cast<const XmsgApCfgLog*>(
               &_XmsgApCfgLog_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(XmsgApCfgLog* other);
  friend void swap(XmsgApCfgLog& a, XmsgApCfgLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgApCfgLog* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgApCfgLog* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgApCfgLog& from);
  void MergeFrom(const XmsgApCfgLog& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgApCfgLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  const ::std::string& level() const;
  void set_level(const ::std::string& value);
  #if LANG_CXX11
  void set_level(::std::string&& value);
  #endif
  void set_level(const char* value);
  void set_level(const char* value, size_t size);
  ::std::string* mutable_level();
  ::std::string* release_level();
  void set_allocated_level(::std::string* level);

  // string output = 2;
  void clear_output();
  static const int kOutputFieldNumber = 2;
  const ::std::string& output() const;
  void set_output(const ::std::string& value);
  #if LANG_CXX11
  void set_output(::std::string&& value);
  #endif
  void set_output(const char* value);
  void set_output(const char* value, size_t size);
  ::std::string* mutable_output();
  ::std::string* release_output();
  void set_allocated_output(::std::string* output);

  // @@protoc_insertion_point(class_scope:XmsgApCfgLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr level_;
  ::google::protobuf::internal::ArenaStringPtr output_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgApCfgLogImpl();
};
// -------------------------------------------------------------------

class XmsgImApCfgXmsgNeN2hAddr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImApCfgXmsgNeN2hAddr) */ {
 public:
  XmsgImApCfgXmsgNeN2hAddr();
  virtual ~XmsgImApCfgXmsgNeN2hAddr();

  XmsgImApCfgXmsgNeN2hAddr(const XmsgImApCfgXmsgNeN2hAddr& from);

  inline XmsgImApCfgXmsgNeN2hAddr& operator=(const XmsgImApCfgXmsgNeN2hAddr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImApCfgXmsgNeN2hAddr(XmsgImApCfgXmsgNeN2hAddr&& from) noexcept
    : XmsgImApCfgXmsgNeN2hAddr() {
    *this = ::std::move(from);
  }

  inline XmsgImApCfgXmsgNeN2hAddr& operator=(XmsgImApCfgXmsgNeN2hAddr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImApCfgXmsgNeN2hAddr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImApCfgXmsgNeN2hAddr* internal_default_instance() {
    return reinterpret_cast<const XmsgImApCfgXmsgNeN2hAddr*>(
               &_XmsgImApCfgXmsgNeN2hAddr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(XmsgImApCfgXmsgNeN2hAddr* other);
  friend void swap(XmsgImApCfgXmsgNeN2hAddr& a, XmsgImApCfgXmsgNeN2hAddr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImApCfgXmsgNeN2hAddr* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImApCfgXmsgNeN2hAddr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImApCfgXmsgNeN2hAddr& from);
  void MergeFrom(const XmsgImApCfgXmsgNeN2hAddr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImApCfgXmsgNeN2hAddr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string neg = 1;
  void clear_neg();
  static const int kNegFieldNumber = 1;
  const ::std::string& neg() const;
  void set_neg(const ::std::string& value);
  #if LANG_CXX11
  void set_neg(::std::string&& value);
  #endif
  void set_neg(const char* value);
  void set_neg(const char* value, size_t size);
  ::std::string* mutable_neg();
  ::std::string* release_neg();
  void set_allocated_neg(::std::string* neg);

  // string cgt = 2;
  void clear_cgt();
  static const int kCgtFieldNumber = 2;
  const ::std::string& cgt() const;
  void set_cgt(const ::std::string& value);
  #if LANG_CXX11
  void set_cgt(::std::string&& value);
  #endif
  void set_cgt(const char* value);
  void set_cgt(const char* value, size_t size);
  ::std::string* mutable_cgt();
  ::std::string* release_cgt();
  void set_allocated_cgt(::std::string* cgt);

  // string prefix = 3;
  void clear_prefix();
  static const int kPrefixFieldNumber = 3;
  const ::std::string& prefix() const;
  void set_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_prefix(::std::string&& value);
  #endif
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  ::std::string* mutable_prefix();
  ::std::string* release_prefix();
  void set_allocated_prefix(::std::string* prefix);

  // string pwd = 4;
  void clear_pwd();
  static const int kPwdFieldNumber = 4;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // string addr = 5;
  void clear_addr();
  static const int kAddrFieldNumber = 5;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // @@protoc_insertion_point(class_scope:XmsgImApCfgXmsgNeN2hAddr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr neg_;
  ::google::protobuf::internal::ArenaStringPtr cgt_;
  ::google::protobuf::internal::ArenaStringPtr prefix_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dap_2eproto::InitDefaultsXmsgImApCfgXmsgNeN2hAddrImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// XmsgApCfgPb

// string cgt = 1;
inline void XmsgApCfgPb::clear_cgt() {
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgApCfgPb::cgt() const {
  // @@protoc_insertion_point(field_get:XmsgApCfgPb.cgt)
  return cgt_.GetNoArena();
}
inline void XmsgApCfgPb::set_cgt(const ::std::string& value) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgApCfgPb.cgt)
}
#if LANG_CXX11
inline void XmsgApCfgPb::set_cgt(::std::string&& value) {
  
  cgt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgApCfgPb.cgt)
}
#endif
inline void XmsgApCfgPb::set_cgt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgApCfgPb.cgt)
}
inline void XmsgApCfgPb::set_cgt(const char* value, size_t size) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgApCfgPb.cgt)
}
inline ::std::string* XmsgApCfgPb::mutable_cgt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgApCfgPb.cgt)
  return cgt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgApCfgPb::release_cgt() {
  // @@protoc_insertion_point(field_release:XmsgApCfgPb.cgt)
  
  return cgt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgApCfgPb::set_allocated_cgt(::std::string* cgt) {
  if (cgt != NULL) {
    
  } else {
    
  }
  cgt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cgt);
  // @@protoc_insertion_point(field_set_allocated:XmsgApCfgPb.cgt)
}

// .XmsgApCfgLog log = 2;
inline bool XmsgApCfgPb::has_log() const {
  return this != internal_default_instance() && log_ != NULL;
}
inline void XmsgApCfgPb::clear_log() {
  if (GetArenaNoVirtual() == NULL && log_ != NULL) {
    delete log_;
  }
  log_ = NULL;
}
inline const ::XmsgApCfgLog& XmsgApCfgPb::log() const {
  const ::XmsgApCfgLog* p = log_;
  // @@protoc_insertion_point(field_get:XmsgApCfgPb.log)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgApCfgLog*>(
      &::_XmsgApCfgLog_default_instance_);
}
inline ::XmsgApCfgLog* XmsgApCfgPb::release_log() {
  // @@protoc_insertion_point(field_release:XmsgApCfgPb.log)
  
  ::XmsgApCfgLog* temp = log_;
  log_ = NULL;
  return temp;
}
inline ::XmsgApCfgLog* XmsgApCfgPb::mutable_log() {
  
  if (log_ == NULL) {
    log_ = new ::XmsgApCfgLog;
  }
  // @@protoc_insertion_point(field_mutable:XmsgApCfgPb.log)
  return log_;
}
inline void XmsgApCfgPb::set_allocated_log(::XmsgApCfgLog* log) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete log_;
  }
  if (log) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      log = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, log, submessage_arena);
    }
    
  } else {
    
  }
  log_ = log;
  // @@protoc_insertion_point(field_set_allocated:XmsgApCfgPb.log)
}

// .XmsgApCfgXscTcpServer pubTcp = 3;
inline bool XmsgApCfgPb::has_pubtcp() const {
  return this != internal_default_instance() && pubtcp_ != NULL;
}
inline void XmsgApCfgPb::clear_pubtcp() {
  if (GetArenaNoVirtual() == NULL && pubtcp_ != NULL) {
    delete pubtcp_;
  }
  pubtcp_ = NULL;
}
inline const ::XmsgApCfgXscTcpServer& XmsgApCfgPb::pubtcp() const {
  const ::XmsgApCfgXscTcpServer* p = pubtcp_;
  // @@protoc_insertion_point(field_get:XmsgApCfgPb.pubTcp)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgApCfgXscTcpServer*>(
      &::_XmsgApCfgXscTcpServer_default_instance_);
}
inline ::XmsgApCfgXscTcpServer* XmsgApCfgPb::release_pubtcp() {
  // @@protoc_insertion_point(field_release:XmsgApCfgPb.pubTcp)
  
  ::XmsgApCfgXscTcpServer* temp = pubtcp_;
  pubtcp_ = NULL;
  return temp;
}
inline ::XmsgApCfgXscTcpServer* XmsgApCfgPb::mutable_pubtcp() {
  
  if (pubtcp_ == NULL) {
    pubtcp_ = new ::XmsgApCfgXscTcpServer;
  }
  // @@protoc_insertion_point(field_mutable:XmsgApCfgPb.pubTcp)
  return pubtcp_;
}
inline void XmsgApCfgPb::set_allocated_pubtcp(::XmsgApCfgXscTcpServer* pubtcp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pubtcp_;
  }
  if (pubtcp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pubtcp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pubtcp, submessage_arena);
    }
    
  } else {
    
  }
  pubtcp_ = pubtcp;
  // @@protoc_insertion_point(field_set_allocated:XmsgApCfgPb.pubTcp)
}

// .XmsgApCfgXscHttpServer pubHttp = 4;
inline bool XmsgApCfgPb::has_pubhttp() const {
  return this != internal_default_instance() && pubhttp_ != NULL;
}
inline void XmsgApCfgPb::clear_pubhttp() {
  if (GetArenaNoVirtual() == NULL && pubhttp_ != NULL) {
    delete pubhttp_;
  }
  pubhttp_ = NULL;
}
inline const ::XmsgApCfgXscHttpServer& XmsgApCfgPb::pubhttp() const {
  const ::XmsgApCfgXscHttpServer* p = pubhttp_;
  // @@protoc_insertion_point(field_get:XmsgApCfgPb.pubHttp)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgApCfgXscHttpServer*>(
      &::_XmsgApCfgXscHttpServer_default_instance_);
}
inline ::XmsgApCfgXscHttpServer* XmsgApCfgPb::release_pubhttp() {
  // @@protoc_insertion_point(field_release:XmsgApCfgPb.pubHttp)
  
  ::XmsgApCfgXscHttpServer* temp = pubhttp_;
  pubhttp_ = NULL;
  return temp;
}
inline ::XmsgApCfgXscHttpServer* XmsgApCfgPb::mutable_pubhttp() {
  
  if (pubhttp_ == NULL) {
    pubhttp_ = new ::XmsgApCfgXscHttpServer;
  }
  // @@protoc_insertion_point(field_mutable:XmsgApCfgPb.pubHttp)
  return pubhttp_;
}
inline void XmsgApCfgPb::set_allocated_pubhttp(::XmsgApCfgXscHttpServer* pubhttp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pubhttp_;
  }
  if (pubhttp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pubhttp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pubhttp, submessage_arena);
    }
    
  } else {
    
  }
  pubhttp_ = pubhttp;
  // @@protoc_insertion_point(field_set_allocated:XmsgApCfgPb.pubHttp)
}

// .XmsgApCfgXscWebSocketServer pubWebSocket = 5;
inline bool XmsgApCfgPb::has_pubwebsocket() const {
  return this != internal_default_instance() && pubwebsocket_ != NULL;
}
inline void XmsgApCfgPb::clear_pubwebsocket() {
  if (GetArenaNoVirtual() == NULL && pubwebsocket_ != NULL) {
    delete pubwebsocket_;
  }
  pubwebsocket_ = NULL;
}
inline const ::XmsgApCfgXscWebSocketServer& XmsgApCfgPb::pubwebsocket() const {
  const ::XmsgApCfgXscWebSocketServer* p = pubwebsocket_;
  // @@protoc_insertion_point(field_get:XmsgApCfgPb.pubWebSocket)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgApCfgXscWebSocketServer*>(
      &::_XmsgApCfgXscWebSocketServer_default_instance_);
}
inline ::XmsgApCfgXscWebSocketServer* XmsgApCfgPb::release_pubwebsocket() {
  // @@protoc_insertion_point(field_release:XmsgApCfgPb.pubWebSocket)
  
  ::XmsgApCfgXscWebSocketServer* temp = pubwebsocket_;
  pubwebsocket_ = NULL;
  return temp;
}
inline ::XmsgApCfgXscWebSocketServer* XmsgApCfgPb::mutable_pubwebsocket() {
  
  if (pubwebsocket_ == NULL) {
    pubwebsocket_ = new ::XmsgApCfgXscWebSocketServer;
  }
  // @@protoc_insertion_point(field_mutable:XmsgApCfgPb.pubWebSocket)
  return pubwebsocket_;
}
inline void XmsgApCfgPb::set_allocated_pubwebsocket(::XmsgApCfgXscWebSocketServer* pubwebsocket) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pubwebsocket_;
  }
  if (pubwebsocket) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pubwebsocket = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pubwebsocket, submessage_arena);
    }
    
  } else {
    
  }
  pubwebsocket_ = pubwebsocket;
  // @@protoc_insertion_point(field_set_allocated:XmsgApCfgPb.pubWebSocket)
}

// .XmsgApCfgXscUdpServer pubUdp = 6;
inline bool XmsgApCfgPb::has_pubudp() const {
  return this != internal_default_instance() && pubudp_ != NULL;
}
inline void XmsgApCfgPb::clear_pubudp() {
  if (GetArenaNoVirtual() == NULL && pubudp_ != NULL) {
    delete pubudp_;
  }
  pubudp_ = NULL;
}
inline const ::XmsgApCfgXscUdpServer& XmsgApCfgPb::pubudp() const {
  const ::XmsgApCfgXscUdpServer* p = pubudp_;
  // @@protoc_insertion_point(field_get:XmsgApCfgPb.pubUdp)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgApCfgXscUdpServer*>(
      &::_XmsgApCfgXscUdpServer_default_instance_);
}
inline ::XmsgApCfgXscUdpServer* XmsgApCfgPb::release_pubudp() {
  // @@protoc_insertion_point(field_release:XmsgApCfgPb.pubUdp)
  
  ::XmsgApCfgXscUdpServer* temp = pubudp_;
  pubudp_ = NULL;
  return temp;
}
inline ::XmsgApCfgXscUdpServer* XmsgApCfgPb::mutable_pubudp() {
  
  if (pubudp_ == NULL) {
    pubudp_ = new ::XmsgApCfgXscUdpServer;
  }
  // @@protoc_insertion_point(field_mutable:XmsgApCfgPb.pubUdp)
  return pubudp_;
}
inline void XmsgApCfgPb::set_allocated_pubudp(::XmsgApCfgXscUdpServer* pubudp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pubudp_;
  }
  if (pubudp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pubudp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pubudp, submessage_arena);
    }
    
  } else {
    
  }
  pubudp_ = pubudp;
  // @@protoc_insertion_point(field_set_allocated:XmsgApCfgPb.pubUdp)
}

// .XmsgApCfgXscRudpServer pubRudp = 7;
inline bool XmsgApCfgPb::has_pubrudp() const {
  return this != internal_default_instance() && pubrudp_ != NULL;
}
inline void XmsgApCfgPb::clear_pubrudp() {
  if (GetArenaNoVirtual() == NULL && pubrudp_ != NULL) {
    delete pubrudp_;
  }
  pubrudp_ = NULL;
}
inline const ::XmsgApCfgXscRudpServer& XmsgApCfgPb::pubrudp() const {
  const ::XmsgApCfgXscRudpServer* p = pubrudp_;
  // @@protoc_insertion_point(field_get:XmsgApCfgPb.pubRudp)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgApCfgXscRudpServer*>(
      &::_XmsgApCfgXscRudpServer_default_instance_);
}
inline ::XmsgApCfgXscRudpServer* XmsgApCfgPb::release_pubrudp() {
  // @@protoc_insertion_point(field_release:XmsgApCfgPb.pubRudp)
  
  ::XmsgApCfgXscRudpServer* temp = pubrudp_;
  pubrudp_ = NULL;
  return temp;
}
inline ::XmsgApCfgXscRudpServer* XmsgApCfgPb::mutable_pubrudp() {
  
  if (pubrudp_ == NULL) {
    pubrudp_ = new ::XmsgApCfgXscRudpServer;
  }
  // @@protoc_insertion_point(field_mutable:XmsgApCfgPb.pubRudp)
  return pubrudp_;
}
inline void XmsgApCfgPb::set_allocated_pubrudp(::XmsgApCfgXscRudpServer* pubrudp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pubrudp_;
  }
  if (pubrudp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pubrudp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pubrudp, submessage_arena);
    }
    
  } else {
    
  }
  pubrudp_ = pubrudp;
  // @@protoc_insertion_point(field_set_allocated:XmsgApCfgPb.pubRudp)
}

// .XmsgApCfgXscTcpServer priTcp = 8;
inline bool XmsgApCfgPb::has_pritcp() const {
  return this != internal_default_instance() && pritcp_ != NULL;
}
inline void XmsgApCfgPb::clear_pritcp() {
  if (GetArenaNoVirtual() == NULL && pritcp_ != NULL) {
    delete pritcp_;
  }
  pritcp_ = NULL;
}
inline const ::XmsgApCfgXscTcpServer& XmsgApCfgPb::pritcp() const {
  const ::XmsgApCfgXscTcpServer* p = pritcp_;
  // @@protoc_insertion_point(field_get:XmsgApCfgPb.priTcp)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgApCfgXscTcpServer*>(
      &::_XmsgApCfgXscTcpServer_default_instance_);
}
inline ::XmsgApCfgXscTcpServer* XmsgApCfgPb::release_pritcp() {
  // @@protoc_insertion_point(field_release:XmsgApCfgPb.priTcp)
  
  ::XmsgApCfgXscTcpServer* temp = pritcp_;
  pritcp_ = NULL;
  return temp;
}
inline ::XmsgApCfgXscTcpServer* XmsgApCfgPb::mutable_pritcp() {
  
  if (pritcp_ == NULL) {
    pritcp_ = new ::XmsgApCfgXscTcpServer;
  }
  // @@protoc_insertion_point(field_mutable:XmsgApCfgPb.priTcp)
  return pritcp_;
}
inline void XmsgApCfgPb::set_allocated_pritcp(::XmsgApCfgXscTcpServer* pritcp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pritcp_;
  }
  if (pritcp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pritcp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pritcp, submessage_arena);
    }
    
  } else {
    
  }
  pritcp_ = pritcp;
  // @@protoc_insertion_point(field_set_allocated:XmsgApCfgPb.priTcp)
}

// repeated .XmsgImApCfgXmsgNeN2hAddr n2h = 9;
inline int XmsgApCfgPb::n2h_size() const {
  return n2h_.size();
}
inline void XmsgApCfgPb::clear_n2h() {
  n2h_.Clear();
}
inline const ::XmsgImApCfgXmsgNeN2hAddr& XmsgApCfgPb::n2h(int index) const {
  // @@protoc_insertion_point(field_get:XmsgApCfgPb.n2h)
  return n2h_.Get(index);
}
inline ::XmsgImApCfgXmsgNeN2hAddr* XmsgApCfgPb::mutable_n2h(int index) {
  // @@protoc_insertion_point(field_mutable:XmsgApCfgPb.n2h)
  return n2h_.Mutable(index);
}
inline ::XmsgImApCfgXmsgNeN2hAddr* XmsgApCfgPb::add_n2h() {
  // @@protoc_insertion_point(field_add:XmsgApCfgPb.n2h)
  return n2h_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::XmsgImApCfgXmsgNeN2hAddr >*
XmsgApCfgPb::mutable_n2h() {
  // @@protoc_insertion_point(field_mutable_list:XmsgApCfgPb.n2h)
  return &n2h_;
}
inline const ::google::protobuf::RepeatedPtrField< ::XmsgImApCfgXmsgNeN2hAddr >&
XmsgApCfgPb::n2h() const {
  // @@protoc_insertion_point(field_list:XmsgApCfgPb.n2h)
  return n2h_;
}

// -------------------------------------------------------------------

// XmsgApCfgXscTcpServer

// string addr = 1;
inline void XmsgApCfgXscTcpServer::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgApCfgXscTcpServer::addr() const {
  // @@protoc_insertion_point(field_get:XmsgApCfgXscTcpServer.addr)
  return addr_.GetNoArena();
}
inline void XmsgApCfgXscTcpServer::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgApCfgXscTcpServer.addr)
}
#if LANG_CXX11
inline void XmsgApCfgXscTcpServer::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgApCfgXscTcpServer.addr)
}
#endif
inline void XmsgApCfgXscTcpServer::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgApCfgXscTcpServer.addr)
}
inline void XmsgApCfgXscTcpServer::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgApCfgXscTcpServer.addr)
}
inline ::std::string* XmsgApCfgXscTcpServer::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgApCfgXscTcpServer.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgApCfgXscTcpServer::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgApCfgXscTcpServer.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgApCfgXscTcpServer::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgApCfgXscTcpServer.addr)
}

// uint32 worker = 2;
inline void XmsgApCfgXscTcpServer::clear_worker() {
  worker_ = 0u;
}
inline ::google::protobuf::uint32 XmsgApCfgXscTcpServer::worker() const {
  // @@protoc_insertion_point(field_get:XmsgApCfgXscTcpServer.worker)
  return worker_;
}
inline void XmsgApCfgXscTcpServer::set_worker(::google::protobuf::uint32 value) {
  
  worker_ = value;
  // @@protoc_insertion_point(field_set:XmsgApCfgXscTcpServer.worker)
}

// uint32 peerLimit = 3;
inline void XmsgApCfgXscTcpServer::clear_peerlimit() {
  peerlimit_ = 0u;
}
inline ::google::protobuf::uint32 XmsgApCfgXscTcpServer::peerlimit() const {
  // @@protoc_insertion_point(field_get:XmsgApCfgXscTcpServer.peerLimit)
  return peerlimit_;
}
inline void XmsgApCfgXscTcpServer::set_peerlimit(::google::protobuf::uint32 value) {
  
  peerlimit_ = value;
  // @@protoc_insertion_point(field_set:XmsgApCfgXscTcpServer.peerLimit)
}

// uint32 peerMtu = 4;
inline void XmsgApCfgXscTcpServer::clear_peermtu() {
  peermtu_ = 0u;
}
inline ::google::protobuf::uint32 XmsgApCfgXscTcpServer::peermtu() const {
  // @@protoc_insertion_point(field_get:XmsgApCfgXscTcpServer.peerMtu)
  return peermtu_;
}
inline void XmsgApCfgXscTcpServer::set_peermtu(::google::protobuf::uint32 value) {
  
  peermtu_ = value;
  // @@protoc_insertion_point(field_set:XmsgApCfgXscTcpServer.peerMtu)
}

// uint32 peerRcvBuf = 5;
inline void XmsgApCfgXscTcpServer::clear_peerrcvbuf() {
  peerrcvbuf_ = 0u;
}
inline ::google::protobuf::uint32 XmsgApCfgXscTcpServer::peerrcvbuf() const {
  // @@protoc_insertion_point(field_get:XmsgApCfgXscTcpServer.peerRcvBuf)
  return peerrcvbuf_;
}
inline void XmsgApCfgXscTcpServer::set_peerrcvbuf(::google::protobuf::uint32 value) {
  
  peerrcvbuf_ = value;
  // @@protoc_insertion_point(field_set:XmsgApCfgXscTcpServer.peerRcvBuf)
}

// uint32 peerSndBuf = 6;
inline void XmsgApCfgXscTcpServer::clear_peersndbuf() {
  peersndbuf_ = 0u;
}
inline ::google::protobuf::uint32 XmsgApCfgXscTcpServer::peersndbuf() const {
  // @@protoc_insertion_point(field_get:XmsgApCfgXscTcpServer.peerSndBuf)
  return peersndbuf_;
}
inline void XmsgApCfgXscTcpServer::set_peersndbuf(::google::protobuf::uint32 value) {
  
  peersndbuf_ = value;
  // @@protoc_insertion_point(field_set:XmsgApCfgXscTcpServer.peerSndBuf)
}

// uint32 lazyClose = 7;
inline void XmsgApCfgXscTcpServer::clear_lazyclose() {
  lazyclose_ = 0u;
}
inline ::google::protobuf::uint32 XmsgApCfgXscTcpServer::lazyclose() const {
  // @@protoc_insertion_point(field_get:XmsgApCfgXscTcpServer.lazyClose)
  return lazyclose_;
}
inline void XmsgApCfgXscTcpServer::set_lazyclose(::google::protobuf::uint32 value) {
  
  lazyclose_ = value;
  // @@protoc_insertion_point(field_set:XmsgApCfgXscTcpServer.lazyClose)
}

// bool tracing = 8;
inline void XmsgApCfgXscTcpServer::clear_tracing() {
  tracing_ = false;
}
inline bool XmsgApCfgXscTcpServer::tracing() const {
  // @@protoc_insertion_point(field_get:XmsgApCfgXscTcpServer.tracing)
  return tracing_;
}
inline void XmsgApCfgXscTcpServer::set_tracing(bool value) {
  
  tracing_ = value;
  // @@protoc_insertion_point(field_set:XmsgApCfgXscTcpServer.tracing)
}

// uint32 heartbeat = 9;
inline void XmsgApCfgXscTcpServer::clear_heartbeat() {
  heartbeat_ = 0u;
}
inline ::google::protobuf::uint32 XmsgApCfgXscTcpServer::heartbeat() const {
  // @@protoc_insertion_point(field_get:XmsgApCfgXscTcpServer.heartbeat)
  return heartbeat_;
}
inline void XmsgApCfgXscTcpServer::set_heartbeat(::google::protobuf::uint32 value) {
  
  heartbeat_ = value;
  // @@protoc_insertion_point(field_set:XmsgApCfgXscTcpServer.heartbeat)
}

// uint32 n2hZombie = 10;
inline void XmsgApCfgXscTcpServer::clear_n2hzombie() {
  n2hzombie_ = 0u;
}
inline ::google::protobuf::uint32 XmsgApCfgXscTcpServer::n2hzombie() const {
  // @@protoc_insertion_point(field_get:XmsgApCfgXscTcpServer.n2hZombie)
  return n2hzombie_;
}
inline void XmsgApCfgXscTcpServer::set_n2hzombie(::google::protobuf::uint32 value) {
  
  n2hzombie_ = value;
  // @@protoc_insertion_point(field_set:XmsgApCfgXscTcpServer.n2hZombie)
}

// uint32 n2hTransTimeout = 11;
inline void XmsgApCfgXscTcpServer::clear_n2htranstimeout() {
  n2htranstimeout_ = 0u;
}
inline ::google::protobuf::uint32 XmsgApCfgXscTcpServer::n2htranstimeout() const {
  // @@protoc_insertion_point(field_get:XmsgApCfgXscTcpServer.n2hTransTimeout)
  return n2htranstimeout_;
}
inline void XmsgApCfgXscTcpServer::set_n2htranstimeout(::google::protobuf::uint32 value) {
  
  n2htranstimeout_ = value;
  // @@protoc_insertion_point(field_set:XmsgApCfgXscTcpServer.n2hTransTimeout)
}

// bool n2hTracing = 12;
inline void XmsgApCfgXscTcpServer::clear_n2htracing() {
  n2htracing_ = false;
}
inline bool XmsgApCfgXscTcpServer::n2htracing() const {
  // @@protoc_insertion_point(field_get:XmsgApCfgXscTcpServer.n2hTracing)
  return n2htracing_;
}
inline void XmsgApCfgXscTcpServer::set_n2htracing(bool value) {
  
  n2htracing_ = value;
  // @@protoc_insertion_point(field_set:XmsgApCfgXscTcpServer.n2hTracing)
}

// uint32 h2nReConn = 13;
inline void XmsgApCfgXscTcpServer::clear_h2nreconn() {
  h2nreconn_ = 0u;
}
inline ::google::protobuf::uint32 XmsgApCfgXscTcpServer::h2nreconn() const {
  // @@protoc_insertion_point(field_get:XmsgApCfgXscTcpServer.h2nReConn)
  return h2nreconn_;
}
inline void XmsgApCfgXscTcpServer::set_h2nreconn(::google::protobuf::uint32 value) {
  
  h2nreconn_ = value;
  // @@protoc_insertion_point(field_set:XmsgApCfgXscTcpServer.h2nReConn)
}

// uint32 h2nTransTimeout = 14;
inline void XmsgApCfgXscTcpServer::clear_h2ntranstimeout() {
  h2ntranstimeout_ = 0u;
}
inline ::google::protobuf::uint32 XmsgApCfgXscTcpServer::h2ntranstimeout() const {
  // @@protoc_insertion_point(field_get:XmsgApCfgXscTcpServer.h2nTransTimeout)
  return h2ntranstimeout_;
}
inline void XmsgApCfgXscTcpServer::set_h2ntranstimeout(::google::protobuf::uint32 value) {
  
  h2ntranstimeout_ = value;
  // @@protoc_insertion_point(field_set:XmsgApCfgXscTcpServer.h2nTransTimeout)
}

// -------------------------------------------------------------------

// XmsgApCfgXscHttpServer

// .XmsgApCfgXscTcpServer tcp = 1;
inline bool XmsgApCfgXscHttpServer::has_tcp() const {
  return this != internal_default_instance() && tcp_ != NULL;
}
inline void XmsgApCfgXscHttpServer::clear_tcp() {
  if (GetArenaNoVirtual() == NULL && tcp_ != NULL) {
    delete tcp_;
  }
  tcp_ = NULL;
}
inline const ::XmsgApCfgXscTcpServer& XmsgApCfgXscHttpServer::tcp() const {
  const ::XmsgApCfgXscTcpServer* p = tcp_;
  // @@protoc_insertion_point(field_get:XmsgApCfgXscHttpServer.tcp)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgApCfgXscTcpServer*>(
      &::_XmsgApCfgXscTcpServer_default_instance_);
}
inline ::XmsgApCfgXscTcpServer* XmsgApCfgXscHttpServer::release_tcp() {
  // @@protoc_insertion_point(field_release:XmsgApCfgXscHttpServer.tcp)
  
  ::XmsgApCfgXscTcpServer* temp = tcp_;
  tcp_ = NULL;
  return temp;
}
inline ::XmsgApCfgXscTcpServer* XmsgApCfgXscHttpServer::mutable_tcp() {
  
  if (tcp_ == NULL) {
    tcp_ = new ::XmsgApCfgXscTcpServer;
  }
  // @@protoc_insertion_point(field_mutable:XmsgApCfgXscHttpServer.tcp)
  return tcp_;
}
inline void XmsgApCfgXscHttpServer::set_allocated_tcp(::XmsgApCfgXscTcpServer* tcp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tcp_;
  }
  if (tcp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tcp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tcp, submessage_arena);
    }
    
  } else {
    
  }
  tcp_ = tcp;
  // @@protoc_insertion_point(field_set_allocated:XmsgApCfgXscHttpServer.tcp)
}

// uint32 headerLimit = 2;
inline void XmsgApCfgXscHttpServer::clear_headerlimit() {
  headerlimit_ = 0u;
}
inline ::google::protobuf::uint32 XmsgApCfgXscHttpServer::headerlimit() const {
  // @@protoc_insertion_point(field_get:XmsgApCfgXscHttpServer.headerLimit)
  return headerlimit_;
}
inline void XmsgApCfgXscHttpServer::set_headerlimit(::google::protobuf::uint32 value) {
  
  headerlimit_ = value;
  // @@protoc_insertion_point(field_set:XmsgApCfgXscHttpServer.headerLimit)
}

// uint32 bodyLimit = 3;
inline void XmsgApCfgXscHttpServer::clear_bodylimit() {
  bodylimit_ = 0u;
}
inline ::google::protobuf::uint32 XmsgApCfgXscHttpServer::bodylimit() const {
  // @@protoc_insertion_point(field_get:XmsgApCfgXscHttpServer.bodyLimit)
  return bodylimit_;
}
inline void XmsgApCfgXscHttpServer::set_bodylimit(::google::protobuf::uint32 value) {
  
  bodylimit_ = value;
  // @@protoc_insertion_point(field_set:XmsgApCfgXscHttpServer.bodyLimit)
}

// uint32 closeWait = 4;
inline void XmsgApCfgXscHttpServer::clear_closewait() {
  closewait_ = 0u;
}
inline ::google::protobuf::uint32 XmsgApCfgXscHttpServer::closewait() const {
  // @@protoc_insertion_point(field_get:XmsgApCfgXscHttpServer.closeWait)
  return closewait_;
}
inline void XmsgApCfgXscHttpServer::set_closewait(::google::protobuf::uint32 value) {
  
  closewait_ = value;
  // @@protoc_insertion_point(field_set:XmsgApCfgXscHttpServer.closeWait)
}

// repeated string requiredHeader = 5;
inline int XmsgApCfgXscHttpServer::requiredheader_size() const {
  return requiredheader_.size();
}
inline void XmsgApCfgXscHttpServer::clear_requiredheader() {
  requiredheader_.Clear();
}
inline const ::std::string& XmsgApCfgXscHttpServer::requiredheader(int index) const {
  // @@protoc_insertion_point(field_get:XmsgApCfgXscHttpServer.requiredHeader)
  return requiredheader_.Get(index);
}
inline ::std::string* XmsgApCfgXscHttpServer::mutable_requiredheader(int index) {
  // @@protoc_insertion_point(field_mutable:XmsgApCfgXscHttpServer.requiredHeader)
  return requiredheader_.Mutable(index);
}
inline void XmsgApCfgXscHttpServer::set_requiredheader(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:XmsgApCfgXscHttpServer.requiredHeader)
  requiredheader_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void XmsgApCfgXscHttpServer::set_requiredheader(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:XmsgApCfgXscHttpServer.requiredHeader)
  requiredheader_.Mutable(index)->assign(std::move(value));
}
#endif
inline void XmsgApCfgXscHttpServer::set_requiredheader(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  requiredheader_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:XmsgApCfgXscHttpServer.requiredHeader)
}
inline void XmsgApCfgXscHttpServer::set_requiredheader(int index, const char* value, size_t size) {
  requiredheader_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:XmsgApCfgXscHttpServer.requiredHeader)
}
inline ::std::string* XmsgApCfgXscHttpServer::add_requiredheader() {
  // @@protoc_insertion_point(field_add_mutable:XmsgApCfgXscHttpServer.requiredHeader)
  return requiredheader_.Add();
}
inline void XmsgApCfgXscHttpServer::add_requiredheader(const ::std::string& value) {
  requiredheader_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:XmsgApCfgXscHttpServer.requiredHeader)
}
#if LANG_CXX11
inline void XmsgApCfgXscHttpServer::add_requiredheader(::std::string&& value) {
  requiredheader_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:XmsgApCfgXscHttpServer.requiredHeader)
}
#endif
inline void XmsgApCfgXscHttpServer::add_requiredheader(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  requiredheader_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:XmsgApCfgXscHttpServer.requiredHeader)
}
inline void XmsgApCfgXscHttpServer::add_requiredheader(const char* value, size_t size) {
  requiredheader_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:XmsgApCfgXscHttpServer.requiredHeader)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
XmsgApCfgXscHttpServer::requiredheader() const {
  // @@protoc_insertion_point(field_list:XmsgApCfgXscHttpServer.requiredHeader)
  return requiredheader_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
XmsgApCfgXscHttpServer::mutable_requiredheader() {
  // @@protoc_insertion_point(field_mutable_list:XmsgApCfgXscHttpServer.requiredHeader)
  return &requiredheader_;
}

// -------------------------------------------------------------------

// XmsgApCfgXscWebSocketServer

// .XmsgApCfgXscTcpServer tcp = 1;
inline bool XmsgApCfgXscWebSocketServer::has_tcp() const {
  return this != internal_default_instance() && tcp_ != NULL;
}
inline void XmsgApCfgXscWebSocketServer::clear_tcp() {
  if (GetArenaNoVirtual() == NULL && tcp_ != NULL) {
    delete tcp_;
  }
  tcp_ = NULL;
}
inline const ::XmsgApCfgXscTcpServer& XmsgApCfgXscWebSocketServer::tcp() const {
  const ::XmsgApCfgXscTcpServer* p = tcp_;
  // @@protoc_insertion_point(field_get:XmsgApCfgXscWebSocketServer.tcp)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgApCfgXscTcpServer*>(
      &::_XmsgApCfgXscTcpServer_default_instance_);
}
inline ::XmsgApCfgXscTcpServer* XmsgApCfgXscWebSocketServer::release_tcp() {
  // @@protoc_insertion_point(field_release:XmsgApCfgXscWebSocketServer.tcp)
  
  ::XmsgApCfgXscTcpServer* temp = tcp_;
  tcp_ = NULL;
  return temp;
}
inline ::XmsgApCfgXscTcpServer* XmsgApCfgXscWebSocketServer::mutable_tcp() {
  
  if (tcp_ == NULL) {
    tcp_ = new ::XmsgApCfgXscTcpServer;
  }
  // @@protoc_insertion_point(field_mutable:XmsgApCfgXscWebSocketServer.tcp)
  return tcp_;
}
inline void XmsgApCfgXscWebSocketServer::set_allocated_tcp(::XmsgApCfgXscTcpServer* tcp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tcp_;
  }
  if (tcp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tcp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tcp, submessage_arena);
    }
    
  } else {
    
  }
  tcp_ = tcp;
  // @@protoc_insertion_point(field_set_allocated:XmsgApCfgXscWebSocketServer.tcp)
}

// -------------------------------------------------------------------

// XmsgApCfgXscUdpServer

// string addr = 1;
inline void XmsgApCfgXscUdpServer::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgApCfgXscUdpServer::addr() const {
  // @@protoc_insertion_point(field_get:XmsgApCfgXscUdpServer.addr)
  return addr_.GetNoArena();
}
inline void XmsgApCfgXscUdpServer::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgApCfgXscUdpServer.addr)
}
#if LANG_CXX11
inline void XmsgApCfgXscUdpServer::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgApCfgXscUdpServer.addr)
}
#endif
inline void XmsgApCfgXscUdpServer::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgApCfgXscUdpServer.addr)
}
inline void XmsgApCfgXscUdpServer::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgApCfgXscUdpServer.addr)
}
inline ::std::string* XmsgApCfgXscUdpServer::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgApCfgXscUdpServer.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgApCfgXscUdpServer::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgApCfgXscUdpServer.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgApCfgXscUdpServer::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgApCfgXscUdpServer.addr)
}

// -------------------------------------------------------------------

// XmsgApCfgXscRudpServer

// string addr = 1;
inline void XmsgApCfgXscRudpServer::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgApCfgXscRudpServer::addr() const {
  // @@protoc_insertion_point(field_get:XmsgApCfgXscRudpServer.addr)
  return addr_.GetNoArena();
}
inline void XmsgApCfgXscRudpServer::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgApCfgXscRudpServer.addr)
}
#if LANG_CXX11
inline void XmsgApCfgXscRudpServer::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgApCfgXscRudpServer.addr)
}
#endif
inline void XmsgApCfgXscRudpServer::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgApCfgXscRudpServer.addr)
}
inline void XmsgApCfgXscRudpServer::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgApCfgXscRudpServer.addr)
}
inline ::std::string* XmsgApCfgXscRudpServer::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgApCfgXscRudpServer.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgApCfgXscRudpServer::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgApCfgXscRudpServer.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgApCfgXscRudpServer::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgApCfgXscRudpServer.addr)
}

// -------------------------------------------------------------------

// XmsgApCfgLog

// string level = 1;
inline void XmsgApCfgLog::clear_level() {
  level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgApCfgLog::level() const {
  // @@protoc_insertion_point(field_get:XmsgApCfgLog.level)
  return level_.GetNoArena();
}
inline void XmsgApCfgLog::set_level(const ::std::string& value) {
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgApCfgLog.level)
}
#if LANG_CXX11
inline void XmsgApCfgLog::set_level(::std::string&& value) {
  
  level_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgApCfgLog.level)
}
#endif
inline void XmsgApCfgLog::set_level(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgApCfgLog.level)
}
inline void XmsgApCfgLog::set_level(const char* value, size_t size) {
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgApCfgLog.level)
}
inline ::std::string* XmsgApCfgLog::mutable_level() {
  
  // @@protoc_insertion_point(field_mutable:XmsgApCfgLog.level)
  return level_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgApCfgLog::release_level() {
  // @@protoc_insertion_point(field_release:XmsgApCfgLog.level)
  
  return level_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgApCfgLog::set_allocated_level(::std::string* level) {
  if (level != NULL) {
    
  } else {
    
  }
  level_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level);
  // @@protoc_insertion_point(field_set_allocated:XmsgApCfgLog.level)
}

// string output = 2;
inline void XmsgApCfgLog::clear_output() {
  output_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgApCfgLog::output() const {
  // @@protoc_insertion_point(field_get:XmsgApCfgLog.output)
  return output_.GetNoArena();
}
inline void XmsgApCfgLog::set_output(const ::std::string& value) {
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgApCfgLog.output)
}
#if LANG_CXX11
inline void XmsgApCfgLog::set_output(::std::string&& value) {
  
  output_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgApCfgLog.output)
}
#endif
inline void XmsgApCfgLog::set_output(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgApCfgLog.output)
}
inline void XmsgApCfgLog::set_output(const char* value, size_t size) {
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgApCfgLog.output)
}
inline ::std::string* XmsgApCfgLog::mutable_output() {
  
  // @@protoc_insertion_point(field_mutable:XmsgApCfgLog.output)
  return output_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgApCfgLog::release_output() {
  // @@protoc_insertion_point(field_release:XmsgApCfgLog.output)
  
  return output_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgApCfgLog::set_allocated_output(::std::string* output) {
  if (output != NULL) {
    
  } else {
    
  }
  output_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output);
  // @@protoc_insertion_point(field_set_allocated:XmsgApCfgLog.output)
}

// -------------------------------------------------------------------

// XmsgImApCfgXmsgNeN2hAddr

// string neg = 1;
inline void XmsgImApCfgXmsgNeN2hAddr::clear_neg() {
  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImApCfgXmsgNeN2hAddr::neg() const {
  // @@protoc_insertion_point(field_get:XmsgImApCfgXmsgNeN2hAddr.neg)
  return neg_.GetNoArena();
}
inline void XmsgImApCfgXmsgNeN2hAddr::set_neg(const ::std::string& value) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImApCfgXmsgNeN2hAddr.neg)
}
#if LANG_CXX11
inline void XmsgImApCfgXmsgNeN2hAddr::set_neg(::std::string&& value) {
  
  neg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImApCfgXmsgNeN2hAddr.neg)
}
#endif
inline void XmsgImApCfgXmsgNeN2hAddr::set_neg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImApCfgXmsgNeN2hAddr.neg)
}
inline void XmsgImApCfgXmsgNeN2hAddr::set_neg(const char* value, size_t size) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImApCfgXmsgNeN2hAddr.neg)
}
inline ::std::string* XmsgImApCfgXmsgNeN2hAddr::mutable_neg() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImApCfgXmsgNeN2hAddr.neg)
  return neg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImApCfgXmsgNeN2hAddr::release_neg() {
  // @@protoc_insertion_point(field_release:XmsgImApCfgXmsgNeN2hAddr.neg)
  
  return neg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImApCfgXmsgNeN2hAddr::set_allocated_neg(::std::string* neg) {
  if (neg != NULL) {
    
  } else {
    
  }
  neg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neg);
  // @@protoc_insertion_point(field_set_allocated:XmsgImApCfgXmsgNeN2hAddr.neg)
}

// string cgt = 2;
inline void XmsgImApCfgXmsgNeN2hAddr::clear_cgt() {
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImApCfgXmsgNeN2hAddr::cgt() const {
  // @@protoc_insertion_point(field_get:XmsgImApCfgXmsgNeN2hAddr.cgt)
  return cgt_.GetNoArena();
}
inline void XmsgImApCfgXmsgNeN2hAddr::set_cgt(const ::std::string& value) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImApCfgXmsgNeN2hAddr.cgt)
}
#if LANG_CXX11
inline void XmsgImApCfgXmsgNeN2hAddr::set_cgt(::std::string&& value) {
  
  cgt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImApCfgXmsgNeN2hAddr.cgt)
}
#endif
inline void XmsgImApCfgXmsgNeN2hAddr::set_cgt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImApCfgXmsgNeN2hAddr.cgt)
}
inline void XmsgImApCfgXmsgNeN2hAddr::set_cgt(const char* value, size_t size) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImApCfgXmsgNeN2hAddr.cgt)
}
inline ::std::string* XmsgImApCfgXmsgNeN2hAddr::mutable_cgt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImApCfgXmsgNeN2hAddr.cgt)
  return cgt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImApCfgXmsgNeN2hAddr::release_cgt() {
  // @@protoc_insertion_point(field_release:XmsgImApCfgXmsgNeN2hAddr.cgt)
  
  return cgt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImApCfgXmsgNeN2hAddr::set_allocated_cgt(::std::string* cgt) {
  if (cgt != NULL) {
    
  } else {
    
  }
  cgt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cgt);
  // @@protoc_insertion_point(field_set_allocated:XmsgImApCfgXmsgNeN2hAddr.cgt)
}

// string prefix = 3;
inline void XmsgImApCfgXmsgNeN2hAddr::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImApCfgXmsgNeN2hAddr::prefix() const {
  // @@protoc_insertion_point(field_get:XmsgImApCfgXmsgNeN2hAddr.prefix)
  return prefix_.GetNoArena();
}
inline void XmsgImApCfgXmsgNeN2hAddr::set_prefix(const ::std::string& value) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImApCfgXmsgNeN2hAddr.prefix)
}
#if LANG_CXX11
inline void XmsgImApCfgXmsgNeN2hAddr::set_prefix(::std::string&& value) {
  
  prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImApCfgXmsgNeN2hAddr.prefix)
}
#endif
inline void XmsgImApCfgXmsgNeN2hAddr::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImApCfgXmsgNeN2hAddr.prefix)
}
inline void XmsgImApCfgXmsgNeN2hAddr::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImApCfgXmsgNeN2hAddr.prefix)
}
inline ::std::string* XmsgImApCfgXmsgNeN2hAddr::mutable_prefix() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImApCfgXmsgNeN2hAddr.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImApCfgXmsgNeN2hAddr::release_prefix() {
  // @@protoc_insertion_point(field_release:XmsgImApCfgXmsgNeN2hAddr.prefix)
  
  return prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImApCfgXmsgNeN2hAddr::set_allocated_prefix(::std::string* prefix) {
  if (prefix != NULL) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:XmsgImApCfgXmsgNeN2hAddr.prefix)
}

// string pwd = 4;
inline void XmsgImApCfgXmsgNeN2hAddr::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImApCfgXmsgNeN2hAddr::pwd() const {
  // @@protoc_insertion_point(field_get:XmsgImApCfgXmsgNeN2hAddr.pwd)
  return pwd_.GetNoArena();
}
inline void XmsgImApCfgXmsgNeN2hAddr::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImApCfgXmsgNeN2hAddr.pwd)
}
#if LANG_CXX11
inline void XmsgImApCfgXmsgNeN2hAddr::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImApCfgXmsgNeN2hAddr.pwd)
}
#endif
inline void XmsgImApCfgXmsgNeN2hAddr::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImApCfgXmsgNeN2hAddr.pwd)
}
inline void XmsgImApCfgXmsgNeN2hAddr::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImApCfgXmsgNeN2hAddr.pwd)
}
inline ::std::string* XmsgImApCfgXmsgNeN2hAddr::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImApCfgXmsgNeN2hAddr.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImApCfgXmsgNeN2hAddr::release_pwd() {
  // @@protoc_insertion_point(field_release:XmsgImApCfgXmsgNeN2hAddr.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImApCfgXmsgNeN2hAddr::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:XmsgImApCfgXmsgNeN2hAddr.pwd)
}

// string addr = 5;
inline void XmsgImApCfgXmsgNeN2hAddr::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImApCfgXmsgNeN2hAddr::addr() const {
  // @@protoc_insertion_point(field_get:XmsgImApCfgXmsgNeN2hAddr.addr)
  return addr_.GetNoArena();
}
inline void XmsgImApCfgXmsgNeN2hAddr::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImApCfgXmsgNeN2hAddr.addr)
}
#if LANG_CXX11
inline void XmsgImApCfgXmsgNeN2hAddr::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImApCfgXmsgNeN2hAddr.addr)
}
#endif
inline void XmsgImApCfgXmsgNeN2hAddr::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImApCfgXmsgNeN2hAddr.addr)
}
inline void XmsgImApCfgXmsgNeN2hAddr::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImApCfgXmsgNeN2hAddr.addr)
}
inline ::std::string* XmsgImApCfgXmsgNeN2hAddr::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImApCfgXmsgNeN2hAddr.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImApCfgXmsgNeN2hAddr::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgImApCfgXmsgNeN2hAddr.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImApCfgXmsgNeN2hAddr::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgImApCfgXmsgNeN2hAddr.addr)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cfg_2dx_2dmsg_2dap_2eproto__INCLUDED
